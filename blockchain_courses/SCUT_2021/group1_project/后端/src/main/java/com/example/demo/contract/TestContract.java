package com.example.demo.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","00000000000000000000000000000000000081525091509150613fbe565b60006040805190810160405280600a81526020017f6e6f7420696e6974656400000000000000000000000000000000000000000000815250915091505b915091565b60006060806000846040518082805190602001908083835b6020831015156140005780518252602082019150602081019050602083039250613fdb565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160009054906101000a900460ff1615156140c5576000606060405190810160405280602281526020017f676574506f72744e616d65206661696c65642c206e6f7420726567697374657281526020017f6564000000000000000000000000000000000000000000000000000000000000815250602060405190810160405280600081525092509250925061420f565b60016000856040518082805190602001908083835b6020831015156140ff57805182526020820191506020810190506020830392506140da565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040805190810160405280600e81526020017f676574506f72744e616d65206f6b00000000000000000000000000000000000081525090808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142015780601f106141d657610100808354040283529160200191614201565b820191906000526020600020905b8154815290600101906020018083116141e457829003601f168201915b505050505090509250925092505b9193909250565b6000606080600085925084915081518351141515614237576000935061435d565b600090505b855181101561435857818181518110151561425357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811015156142ce57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561434b576000935061435d565b808060010191505061423c565b600193505b50505092915050565b6060600082915083808054603f811680603e81146143a057600283018455600183161515614392578192505b6001600284040193506143ba565b83600052602060002060ff19841681556041855560209450505b50505090600182038154600116156143e15790600052602060002090602091828204019190065b7f200000000000000000000000000000000000000000000000000000000000000090919091601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555050600090505b81518110156145685783828281518110151561445c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000290808054603f811680603e81146144da576002830184556001831615156144cc578192505b6001600284040193506144f4565b83600052602060002060ff19841681556041855560209450505b505050906001820381546001161561451b5790600052602060002090602091828204019190065b90919290919091601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550508080600101915050614444565b50505050565b60606009633b9aca00633b9aca07600460009054906101000a900467ffffffffffffffff16020101600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506145e7600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff1661463e565b905090565b600062011f2e600460089054906101000a900463ffffffff1602600460086101000a81548163ffffffff021916908363ffffffff160217905550600460089054906101000a900463ffffffff16905090565b6060806000806060600060646040519080825280601f01601f19166020018201604052801561467c5781602001602082028038833980820191505090505b509450600093505b60008714151561471b57600a8781151561469a57fe5b069250600a878115156146a957fe5b049650826030017f01000000000000000000000000000000000000000000000000000000000000000285858060010196508151811015156146e657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350614684565b836040519080825280601f01601f19166020018201604052801561474e5781602001602082028038833980820191505090505b509150600090505b83811015614807578481600186030381518110151561477157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156147ca57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050614756565b8195505050505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061485557805160ff1916838001178555614883565b82800160010185558215614883579182015b82811115614882578251825591602001919060010190614867565b5b5090506148909190614914565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148d557805160ff1916838001178555614903565b82800160010185558215614903579182015b828111156149025782518255916020019190600101906148e7565b5b5090506149109190614914565b5090565b61493691905b8082111561493257600081600090555060010161491a565b5090565b905600a165627a7a7230582083de0652870eb5220909355caeb201cd5d3ffb3186a8200e4c13bd8a2f8735810029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","6040518082805190602001908083835b602083101515613f985780518252602082019150602081019050602083039250613f73565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040160009054906101000a900460ff16156140225760016040805190810160405280600681526020017f696e6974656400000000000000000000000000000000000000000000000000008152509150915061405f565b60006040805190810160405280600a81526020017f6e6f7420696e6974656400000000000000000000000000000000000000000000815250915091505b915091565b60006060806140716145ec565b63ffffffff166004600c6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f26cd91c94a4e5abe84ec8ef1fed2579151683ca92b70d501c7f9f97b83f8690960016140eb6004600c9054906101000a900467ffffffffffffffff1667ffffffffffffffff1661463e565b60405180831515151581526020018060200180602001838103835260078152602001807f67656e49646f6b00000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561416d578082015181840152602081019050614152565b50505050905090810190601f16801561419a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160016141d46004600c9054906101000a900467ffffffffffffffff1667ffffffffffffffff1661463e565b6040805190810160405280600781526020017f67656e49646f6b0000000000000000000000000000000000000000000000000081525090925092509250909192565b6000606080600085925084915081518351141515614237576000935061435d565b600090505b855181101561435857818181518110151561425357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828151811015156142ce57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561434b576000935061435d565b808060010191505061423c565b600193505b50505092915050565b6060600082915083808054603f811680603e81146143a057600283018455600183161515614392578192505b6001600284040193506143ba565b83600052602060002060ff19841681556041855560209450505b50505090600182038154600116156143e15790600052602060002090602091828204019190065b7f200000000000000000000000000000000000000000000000000000000000000090919091601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555050600090505b81518110156145685783828281518110151561445c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000290808054603f811680603e81146144da576002830184556001831615156144cc578192505b6001600284040193506144f4565b83600052602060002060ff19841681556041855560209450505b505050906001820381546001161561451b5790600052602060002090602091828204019190065b90919290919091601f036101000a81548160ff021916907f010000000000000000000000000000000000000000000000000000000000000084040217905550508080600101915050614444565b50505050565b60606009633b9aca00633b9aca07600460009054906101000a900467ffffffffffffffff16020101600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506145e7600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff1661463e565b905090565b600062011f2e600460089054906101000a900463ffffffff1602600460086101000a81548163ffffffff021916908363ffffffff160217905550600460089054906101000a900463ffffffff16905090565b6060806000806060600060646040519080825280601f01601f19166020018201604052801561467c5781602001602082028038833980820191505090505b509450600093505b60008714151561471b57600a8781151561469a57fe5b069250600a878115156146a957fe5b049650826030017f01000000000000000000000000000000000000000000000000000000000000000285858060010196508151811015156146e657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350614684565b836040519080825280601f01601f19166020018201604052801561474e5781602001602082028038833980820191505090505b509150600090505b83811015614807578481600186030381518110151561477157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156147ca57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050614756565b8195505050505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061485557805160ff1916838001178555614883565b82800160010185558215614883579182015b82811115614882578251825591602001919060010190614867565b5b5090506148909190614914565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148d557805160ff1916838001178555614903565b82800160010185558215614903579182015b828111156149025782518255916020019190600101906148e7565b5b5090506149109190614914565b5090565b61493691905b8082111561493257600081600090555060010161491a565b5090565b905600a165627a7a72305820c62aa51b36f1b965132f060fcbc3733eed00ee6079358edd94d1ab3972bef1460029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"passwd\",\"type\":\"string\"},{\"name\":\"user_type\",\"type\":\"int256\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"}],\"name\":\"isBind\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"in_time\",\"type\":\"string\"},{\"name\":\"out_time\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"addNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"showPath\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"bind2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"passwd\",\"type\":\"string\"}],\"name\":\"login\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"location\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"initHead\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"passwd\",\"type\":\"string\"},{\"name\":\"port_name\",\"type\":\"string\"}],\"name\":\"registerPort\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"genId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"giveRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"}],\"name\":\"hasRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showPortList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"isInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"}],\"name\":\"getPortName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"}],\"name\":\"RegisterPortEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"user_type\",\"type\":\"int256\"}],\"name\":\"LoginEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"genIdEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"}],\"name\":\"bind2Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"}],\"name\":\"initHeadEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"}],\"name\":\"giveRightEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"res\",\"type\":\"string\"}],\"name\":\"addNodeEvent\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_ISBIND = "isBind";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_SHOWPATH = "showPath";

    public static final String FUNC_BIND2 = "bind2";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_INITHEAD = "initHead";

    public static final String FUNC_REGISTERPORT = "registerPort";

    public static final String FUNC_GENID = "genId";

    public static final String FUNC_GIVERIGHT = "giveRight";

    public static final String FUNC_HASRIGHT = "hasRight";

    public static final String FUNC_SHOWPORTLIST = "showPortList";

    public static final String FUNC_ISINIT = "isInit";

    public static final String FUNC_GETPORTNAME = "getPortName";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REGISTERPORTEVENT_EVENT = new Event("RegisterPortEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event LOGINEVENT_EVENT = new Event("LoginEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event GENIDEVENT_EVENT = new Event("genIdEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BIND2EVENT_EVENT = new Event("bind2Event", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event INITHEADEVENT_EVENT = new Event("initHeadEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event GIVERIGHTEVENT_EVENT = new Event("giveRightEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ADDNODEEVENT_EVENT = new Event("addNodeEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected TestContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt register(String user, String passwd, BigInteger user_type) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd),
                new Int256(user_type)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String user, String passwd, BigInteger user_type, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd),
                new Int256(user_type)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String user, String passwd, BigInteger user_type) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd),
                new Int256(user_type)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple2<Boolean, String> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<Boolean, String> isBind(String id, String user) throws ContractException {
        final Function function = new Function(FUNC_ISBIND, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, String>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt addNode(String id, String user, String in_time, String out_time, String token) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(in_time),
                new Utf8String(out_time),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addNode(String id, String user, String in_time, String out_time, String token, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(in_time),
                new Utf8String(out_time),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddNode(String id, String user, String in_time, String out_time, String token) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(in_time),
                new Utf8String(out_time),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getAddNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple2<Boolean, String> getAddNodeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String showPath(String id) throws ContractException {
        final Function function = new Function(FUNC_SHOWPATH, 
                Arrays.<Type>asList(new Utf8String(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt bind2(String id, String user, String token) {
        final Function function = new Function(
                FUNC_BIND2, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void bind2(String id, String user, String token, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BIND2, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBind2(String id, String user, String token) {
        final Function function = new Function(
                FUNC_BIND2, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getBind2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BIND2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<Boolean, String> getBind2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BIND2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt login(String user, String passwd) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void login(String user, String passwd, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLogin(String user, String passwd) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple4<Boolean, String, String, BigInteger> getLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<Boolean, String, String, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt initHead(String id, String time, String location, String user, String token) {
        final Function function = new Function(
                FUNC_INITHEAD, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(time),
                new Utf8String(location),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void initHead(String id, String time, String location, String user, String token, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITHEAD, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(time),
                new Utf8String(location),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitHead(String id, String time, String location, String user, String token) {
        final Function function = new Function(
                FUNC_INITHEAD, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(time),
                new Utf8String(location),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getInitHeadInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITHEAD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple2<Boolean, String> getInitHeadOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INITHEAD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt registerPort(String user, String passwd, String port_name) {
        final Function function = new Function(
                FUNC_REGISTERPORT, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd),
                new Utf8String(port_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerPort(String user, String passwd, String port_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERPORT, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd),
                new Utf8String(port_name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterPort(String user, String passwd, String port_name) {
        final Function function = new Function(
                FUNC_REGISTERPORT, 
                Arrays.<Type>asList(new Utf8String(user),
                new Utf8String(passwd),
                new Utf8String(port_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRegisterPortInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<Boolean, String> getRegisterPortOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt genId() {
        final Function function = new Function(
                FUNC_GENID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void genId(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GENID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGenId() {
        final Function function = new Function(
                FUNC_GENID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<Boolean, String, String> getGenIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GENID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Boolean, String, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt giveRight(String id, String user, String token) {
        final Function function = new Function(
                FUNC_GIVERIGHT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void giveRight(String id, String user, String token, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GIVERIGHT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGiveRight(String id, String user, String token) {
        final Function function = new Function(
                FUNC_GIVERIGHT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user),
                new Utf8String(token)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getGiveRightInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GIVERIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<Boolean, String> getGiveRightOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GIVERIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<Boolean, String>(

                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<Boolean, String> hasRight(String id, String user) throws ContractException {
        final Function function = new Function(FUNC_HASRIGHT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, String>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public String showPortList() throws ContractException {
        final Function function = new Function(FUNC_SHOWPORTLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<Boolean, String> isInit(String id) throws ContractException {
        final Function function = new Function(FUNC_ISINIT, 
                Arrays.<Type>asList(new Utf8String(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, String>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public Tuple3<Boolean, String, String> getPortName(String user) throws ContractException {
        final Function function = new Function(FUNC_GETPORTNAME, 
                Arrays.<Type>asList(new Utf8String(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<Boolean, String, String>(
                (Boolean) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RegisterPortEventEventResponse> getRegisterPortEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERPORTEVENT_EVENT, transactionReceipt);
        ArrayList<RegisterPortEventEventResponse> responses = new ArrayList<RegisterPortEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterPortEventEventResponse typedResponse = new RegisterPortEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterPortEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTERPORTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterPortEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTERPORTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LoginEventEventResponse> getLoginEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINEVENT_EVENT, transactionReceipt);
        ArrayList<LoginEventEventResponse> responses = new ArrayList<LoginEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LoginEventEventResponse typedResponse = new LoginEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.user_type = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLoginEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLoginEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<GenIdEventEventResponse> getGenIdEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GENIDEVENT_EVENT, transactionReceipt);
        ArrayList<GenIdEventEventResponse> responses = new ArrayList<GenIdEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GenIdEventEventResponse typedResponse = new GenIdEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeGenIdEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(GENIDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeGenIdEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(GENIDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<Bind2EventEventResponse> getBind2EventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BIND2EVENT_EVENT, transactionReceipt);
        ArrayList<Bind2EventEventResponse> responses = new ArrayList<Bind2EventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            Bind2EventEventResponse typedResponse = new Bind2EventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeBind2EventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(BIND2EVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeBind2EventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(BIND2EVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InitHeadEventEventResponse> getInitHeadEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INITHEADEVENT_EVENT, transactionReceipt);
        ArrayList<InitHeadEventEventResponse> responses = new ArrayList<InitHeadEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InitHeadEventEventResponse typedResponse = new InitHeadEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInitHeadEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INITHEADEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInitHeadEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INITHEADEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<GiveRightEventEventResponse> getGiveRightEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(GIVERIGHTEVENT_EVENT, transactionReceipt);
        ArrayList<GiveRightEventEventResponse> responses = new ArrayList<GiveRightEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GiveRightEventEventResponse typedResponse = new GiveRightEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeGiveRightEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(GIVERIGHTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeGiveRightEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(GIVERIGHTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AddNodeEventEventResponse> getAddNodeEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDNODEEVENT_EVENT, transactionReceipt);
        ArrayList<AddNodeEventEventResponse> responses = new ArrayList<AddNodeEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddNodeEventEventResponse typedResponse = new AddNodeEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.res = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddNodeEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDNODEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddNodeEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDNODEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TestContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TestContract(contractAddress, client, credential);
    }

    public static TestContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(TestContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;
    }

    public static class RegisterPortEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;
    }

    public static class LoginEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;

        public String token;

        public BigInteger user_type;
    }

    public static class GenIdEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;

        public String id;
    }

    public static class Bind2EventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;
    }

    public static class InitHeadEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;
    }

    public static class GiveRightEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;
    }

    public static class AddNodeEventEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean ret;

        public String res;
    }
}
