package org.fisco.bcos.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int8;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Back extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","1115612ff8578251825591602001919060010190612fdd565b5b50905061300691906131e6565b5090565b50805460018160011615610100020316600290046000825580601f10613030575061304f565b601f01602090049060005260206000209081019061304e91906131e6565b5b50565b8154818355818111156130795781836000526020600020918201910161307891906131e6565b5b505050565b8154818355818111156130a5578183600052602060002091820191016130a4919061320b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130e35780548555613120565b8280016001018555821561312057600052602060002091601f016020900482015b8281111561311f578254825591600101919060010190613104565b5b50905061312d91906131e6565b5090565b6080604051908101604052806060815260200160008019168152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061319857805485556131d5565b828001600101855582156131d557600052602060002091601f016020900482015b828111156131d45782548255916001019190600101906131b9565b5b5090506131e291906131e6565b5090565b61320891905b808211156132045760008160009055506001016131ec565b5090565b90565b61323491905b808211156132305760008181613227919061300a565b50600101613211565b5090565b90565b600082601f830112151561324a57600080fd5b813561325d61325882613b84565b613b57565b9150808252602083016020830185838301111561327957600080fd5b613284838284613c96565b50505092915050565b600082601f83011215156132a057600080fd5b81356132b36132ae82613bb0565b613b57565b915080825260208301602083018583830111156132cf57600080fd5b6132da838284613c96565b50505092915050565b60006132ef8235613c68565b905092915050565b6000806040838503121561330a57600080fd5b600083013567ffffffffffffffff81111561332457600080fd5b6133308582860161328d565b925050602083013567ffffffffffffffff81111561334d57600080fd5b6133598582860161328d565b9150509250929050565b60006020828403121561337557600080fd5b6000613383848285016132e3565b91505092915050565b6000806040838503121561339f57600080fd5b60006133ad858286016132e3565b925050602083013567ffffffffffffffff8111156133ca57600080fd5b6133d685828601613237565b9150509250929050565b6000806000606084860312156133f557600080fd5b6000613403868287016132e3565b935050602084013567ffffffffffffffff81111561342057600080fd5b61342c86828701613237565b925050604061343d868287016132e3565b9150509250925092565b6000806040838503121561345a57600080fd5b6000613468858286016132e3565b925050602083013567ffffffffffffffff81111561348557600080fd5b6134918582860161328d565b9150509250929050565b6000806000606084860312156134b057600080fd5b60006134be868287016132e3565b935050602084013567ffffffffffffffff8111156134db57600080fd5b6134e78682870161328d565b925050604084013567ffffffffffffffff81111561350457600080fd5b6135108682870161328d565b9150509250925092565b6000806040838503121561352d57600080fd5b600061353b858286016132e3565b925050602061354c858286016132e3565b9150509250929050565b60008060006060848603121561356b57600080fd5b6000613579868287016132e3565b935050602061358a868287016132e3565b925050604061359b868287016132e3565b9150509250925092565b6135ae81613c31565b82525050565b60006135bf82613bf6565b808452602084019350836020820285016135d885613bdc565b60005b848110156136115783830388526135f383835161367d565b92506135fe82613c17565b91506020880197506001810190506135db565b508196508694505050505092915050565b600061362d82613c01565b80845260208401935061363f83613be9565b60005b828110156136715761365586835161382a565b61365e82613c24565b9150602086019550600181019050613642565b50849250505092915050565b600061368882613c0c565b80845261369c816020860160208601613ca5565b6136a581613cd8565b602085010191505092915050565b6136bc81613c51565b82525050565b6136cb81613c72565b82525050565b6136da81613c84565b82525050565b6000600482527f426f6f6b000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f53746174650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f55736572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f4c617374426f72726f7754696d650000000000000000000000000000000000006020830152604082019050919050565b6000600482527f46696e65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f426f72726f7765724964000000000000000000000000000000000000000000006020830152604082019050919050565b61383381613c5e565b82525050565b600060608201905061384e60008301856135a5565b818103602083015261385f816136e0565b905061386e604083018461382a565b9392505050565b600060608201905061388a60008301856135a5565b818103602083015261389b8161374e565b90506138aa604083018461382a565b9392505050565b600060608201905081810360008301526138cb8186613622565b905081810360208301526138df81856135b4565b905081810360408301526138f38184613622565b9050949350505050565b600060c08201905081810360008301526139178189613622565b9050818103602083015261392b81886135b4565b9050818103604083015261393f8187613622565b905081810360608301526139538186613622565b905081810360808301526139678185613622565b905081810360a083015261397b8184613622565b9050979650505050505050565b600060208201905061399d60008301846136b3565b92915050565b600060808201905081810360008301526139bc816136e0565b90506139cb602083018561382a565b81810360408301526139dc81613717565b90506139eb60608301846136c2565b9392505050565b60006080820190508181036000830152613a0b816136e0565b9050613a1a602083018561382a565b8181036040830152613a2b81613717565b9050613a3a60608301846136d1565b9392505050565b60006080820190508181036000830152613a5a816136e0565b9050613a69602083018561382a565b8181036040830152613a7a81613785565b9050613a89606083018461382a565b9392505050565b60006080820190508181036000830152613aa9816136e0565b9050613ab8602083018561382a565b8181036040830152613ac9816137f3565b9050613ad8606083018461382a565b9392505050565b60006080820190508181036000830152613af88161374e565b9050613b07602083018561382a565b8181036040830152613b18816137bc565b9050613b27606083018461382a565b9392505050565b6000604082019050613b43600083018561382a565b613b50602083018461382a565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715613b7a57600080fd5b8060405250919050565b600067ffffffffffffffff821115613b9b57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115613bc757600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160000b9050919050565b6000819050919050565b6000819050919050565b6000613c7d82613c5e565b9050919050565b6000613c8f82613c5e565b9050919050565b82818337600083830152505050565b60005b83811015613cc3578082015181840152602081019050613ca8565b83811115613cd2576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058204b99b2964baf054e8fdb397c41120b059615031a1cf4d1db7d24c944d7175fdb6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","60806000806000806000806000808781610ff99190612f5a565b50600086816110089190612f86565b50600085816110179190612f5a565b50600084816110269190612f5a565b50600083816110359190612f5a565b50600082816110449190612f5a565b505b6004805490508110156112da57600060048281548110151561106457fe5b90600052602060002001541415156112cd578d60008060048481548110151561108957fe5b906000526020600020015481526020019081526020016000206002015414156112cc57866004828154811015156110bc57fe5b906000526020600020015490806001815401808255809150509060018203906000526020600020016000909192909190915055508560008060048481548110151561110357fe5b906000526020600020015481526020019081526020016000206000019080600181540180825580915050906001820390600052602060002001600090919290919091509080546001816001161561010002031660029004611165929190612fb2565b50508460008060048481548110151561117a57fe5b90600052602060002001548152602001908152602001600020600101549080600181540180825580915050906001820390600052602060002001600090919290919091505550836000806004848154811015156111d357fe5b906000526020600020015481526020019081526020016000206002015490806001815401808255809150509060018203906000526020600020016000909192909190915055508260008060048481548110151561122c57fe5b906000526020600020015481526020019081526020016000206003015490806001815401808255809150509060018203906000526020600020016000909192909190915055508160008060048481548110151561128557fe5b906000526020600020015481526020019081526020016000206004015490806001815401808255809150509060018203906000526020600020016000909192909190915055505b5b8080600101915050611046565b8686868686868580548060200260200160405190810160405280929190818152602001828054801561132b57602002820191906000526020600020905b815481526020019060010190808311611317575b5050505050955084805480602002602001604051908101604052809291908181526020016000905b8282101561140f578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113fb5780601f106113d0576101008083540402835291602001916113fb565b820191906000526020600020905b8154815290600101906020018083116113de57829003601f168201915b505050505081526020019060010190611353565b5050505094508380548060200260200160405190810160405280929190818152602001828054801561146057602002820191906000526020600020905b81548152602001906001019080831161144c575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156114b257602002820191906000526020600020905b81548152602001906001019080831161149e575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561150457602002820191906000526020600020905b8154815260200190600101908083116114f0575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561155657602002820191906000526020600020905b815481526020019060010190808311611542575b505050505090509c509c509c509c509c509c505050505050505091939550919395565b600080600061158784612ebe565b91506115938583612ecc565b9050809250505092915050565b60008060008084815260200190815260200160002060050160009054906101000a900460ff1615156115f4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91506116b0565b600080848152602001908152602001600020600080820160006116179190613039565b60018201600090556002820160009055600382016000905560048201600090556005820160006101000a81549060ff021916905550505b6004805490508110156116af578260048281548110151561166b57fe5b906000526020600020015414156116a25760048181548110151561168b57fe5b9060005260206000200160009055600191506116b0565b808060010191505061164e565b5b50919050565b6000806116c284612ebe565b8160000181600019169055506116d783612ebe565b8160010181600019169055508060026000820154816000019060001916905560018201548160010190600019169055905050600191505092915050565b600061171e613081565b600080600080600089815260200190815260200160002060c06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117da5780601f106117af576101008083540402835291602001916117da565b820191906000526020600020905b8154815290600101906020018083116117bd57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152505093508360a00151151561185b577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9450611c28565b858460800151141561188f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9450611c28565b858460800181815250506000861415611ac6576305265c0080428115156118b257fe5b04028460600151039250640134fd90008311156119f65760056305265c00640134fd900085038115156118e157fe5b040291506118ef8783612d92565b60000b9050600181141515611926577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9450611c28565b836040016000815250836060016000815250836000808a815260200190815260200160002060008201518160000190805190602001906119679291906130ba565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055509050507fbb9196a5d31049412cc371d2c2a3bbc2d8abdbc6960a2a9d7e40212ccc5da0178860006040516119e5929190613a4a565b60405180910390a160009450611c28565b836040016000815250836060016000815250836000808a81526020019081526020016000206000820151816000019080519060200190611a379291906130ba565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055509050507fbb9196a5d31049412cc371d2c2a3bbc2d8abdbc6960a2a9d7e40212ccc5da017886000604051611ab5929190613a4a565b60405180910390a160019450611c28565b6001861415611c275786846040018181525050620151808042811515611ae857fe5b0402846060018181525050836000808a81526020019081526020016000206000820151816000019080519060200190611b229291906130ba565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055509050507fbb9196a5d31049412cc371d2c2a3bbc2d8abdbc6960a2a9d7e40212ccc5da0178888604051611b9f929190613ae8565b60405180910390a17fbb9196a5d31049412cc371d2c2a3bbc2d8abdbc6960a2a9d7e40212ccc5da017888560600151604051611bdc9291906139fb565b60405180910390a17fbb9196a5d31049412cc371d2c2a3bbc2d8abdbc6960a2a9d7e40212ccc5da017886001604051611c16929190613a99565b60405180910390a160019450611c28565b5b505050509392505050565b600080600060016000868152602001908152602001600020915060008085815260200190815260200160002090508160030160009054906101000a900460ff161515611ca1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9250611da9565b600082600201541115611cb75760009250611da9565b8060050160009054906101000a900460ff161515611cf7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9250611da9565b600181600401541415611d2c577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9250611da9565b6001611d3a85876001611714565b60000b1415611d85577f939e0ee7c91cf4a75806ae809aa839e2d807cf85839f842fb482e6e382d125c08585604051611d74929190613b37565b60405180910390a160019250611da9565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc92505b505092915050565b6000806000611dbf85612ebe565b9150611dca84612ebe565b9050816000191660026000015460001916148015611df45750806000191660026001015460001916145b15611e025760019250611e26565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92505b505092915050565b6000611e3861313a565b8281600001819052507f31323334353600000000000000000000000000000000000000000000000000008160200190600019169081600019168152505060018160600190151590811515815250506001600085815260200190815260200160002060030160009054906101000a900460ff1680611eb55750600084145b15611ee2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9150611fba565b80600160008681526020019081526020016000206000820151816000019080519060200190611f129291906130ba565b50602082015181600101906000191690556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555090505060058490806001815401808255809150509060018203906000526020600020016000909192909190915055507f029fd8f83be52c921e96666fceb457830083ec6e68bf134c5bea4de94820393c3385604051611fad929190613842565b60405180910390a1600191505b5092915050565b6060806060806060806000806000806000806000808781611fe29190612f","","2feb5780548555613028565b8280016001018555821561302857600052602060002091601f016020900482015b8281111561302757825482559160010191906001019061300c565b5b50905061303591906131ef565b5090565b50805460018160011615610100020316600290046000825580601f1061305f575061307e565b601f01602090049060005260206000209081019061307d91906131ef565b5b50565b60c06040519081016040528060608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130fb57805160ff1916838001178555613129565b82800160010185558215613129579182015b8281111561312857825182559160200191906001019061310d565b5b50905061313691906131ef565b5090565b6080604051908101604052806060815260200160008019168152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106131a157805485556131de565b828001600101855582156131de57600052602060002091601f016020900482015b828111156131dd5782548255916001019190600101906131c2565b5b5090506131eb91906131ef565b5090565b61321191905b8082111561320d5760008160009055506001016131f5565b5090565b90565b61323d91905b8082111561323957600081816132309190613039565b5060010161321a565b5090565b90565b600082601f830112151561325357600080fd5b813561326661326182613b8d565b613b60565b9150808252602083016020830185838301111561328257600080fd5b61328d838284613c9f565b50505092915050565b600082601f83011215156132a957600080fd5b81356132bc6132b782613bb9565b613b60565b915080825260208301602083018583830111156132d857600080fd5b6132e3838284613c9f565b50505092915050565b60006132f88235613c71565b905092915050565b6000806040838503121561331357600080fd5b600083013567ffffffffffffffff81111561332d57600080fd5b61333985828601613296565b925050602083013567ffffffffffffffff81111561335657600080fd5b61336285828601613296565b9150509250929050565b60006020828403121561337e57600080fd5b600061338c848285016132ec565b91505092915050565b600080604083850312156133a857600080fd5b60006133b6858286016132ec565b925050602083013567ffffffffffffffff8111156133d357600080fd5b6133df85828601613240565b9150509250929050565b6000806000606084860312156133fe57600080fd5b600061340c868287016132ec565b935050602084013567ffffffffffffffff81111561342957600080fd5b61343586828701613240565b9250506040613446868287016132ec565b9150509250925092565b6000806040838503121561346357600080fd5b6000613471858286016132ec565b925050602083013567ffffffffffffffff81111561348e57600080fd5b61349a85828601613296565b9150509250929050565b6000806000606084860312156134b957600080fd5b60006134c7868287016132ec565b935050602084013567ffffffffffffffff8111156134e457600080fd5b6134f086828701613296565b925050604084013567ffffffffffffffff81111561350d57600080fd5b61351986828701613296565b9150509250925092565b6000806040838503121561353657600080fd5b6000613544858286016132ec565b9250506020613555858286016132ec565b9150509250929050565b60008060006060848603121561357457600080fd5b6000613582868287016132ec565b9350506020613593868287016132ec565b92505060406135a4868287016132ec565b9150509250925092565b6135b781613c3a565b82525050565b60006135c882613bff565b808452602084019350836020820285016135e185613be5565b60005b8481101561361a5783830388526135fc838351613686565b925061360782613c20565b91506020880197506001810190506135e4565b508196508694505050505092915050565b600061363682613c0a565b80845260208401935061364883613bf2565b60005b8281101561367a5761365e868351613833565b61366782613c2d565b915060208601955060018101905061364b565b50849250505092915050565b600061369182613c15565b8084526136a5816020860160208601613cae565b6136ae81613ce1565b602085010191505092915050565b6136c581613c5a565b82525050565b6136d481613c7b565b82525050565b6136e381613c8d565b82525050565b6000600482527f55736572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f426f6f6b000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f4c617374426f72726f7754696d650000000000000000000000000000000000006020830152604082019050919050565b6000600582527f53746174650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f46696e65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f426f72726f7765724964000000000000000000000000000000000000000000006020830152604082019050919050565b61383c81613c67565b82525050565b600060608201905061385760008301856135ae565b8181036020830152613868816136e9565b90506138776040830184613833565b9392505050565b600060608201905061389360008301856135ae565b81810360208301526138a481613720565b90506138b36040830184613833565b9392505050565b600060608201905081810360008301526138d4818661362b565b905081810360208301526138e881856135bd565b905081810360408301526138fc818461362b565b9050949350505050565b600060c0820190508181036000830152613920818961362b565b9050818103602083015261393481886135bd565b90508181036040830152613948818761362b565b9050818103606083015261395c818661362b565b90508181036080830152613970818561362b565b905081810360a0830152613984818461362b565b9050979650505050505050565b60006020820190506139a660008301846136bc565b92915050565b600060808201905081810360008301526139c5816136e9565b90506139d46020830185613833565b81810360408301526139e5816137c5565b90506139f46060830184613833565b9392505050565b60006080820190508181036000830152613a1481613720565b9050613a236020830185613833565b8181036040830152613a3481613757565b9050613a436060830184613833565b9392505050565b60006080820190508181036000830152613a6381613720565b9050613a726020830185613833565b8181036040830152613a838161378e565b9050613a9260608301846136cb565b9392505050565b60006080820190508181036000830152613ab281613720565b9050613ac16020830185613833565b8181036040830152613ad28161378e565b9050613ae160608301846136da565b9392505050565b60006080820190508181036000830152613b0181613720565b9050613b106020830185613833565b8181036040830152613b21816137fc565b9050613b306060830184613833565b9392505050565b6000604082019050613b4c6000830185613833565b613b596020830184613833565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715613b8357600080fd5b8060405250919050565b600067ffffffffffffffff821115613ba457600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115613bd057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008160000b9050919050565b6000819050919050565b6000819050919050565b6000613c8682613c67565b9050919050565b6000613c9882613c67565b9050919050565b82818337600083830152505050565b60005b83811015613ccc578082015181840152602081019050613cb1565b83811115613cdb576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820dd2a0b91e3bb095fb9f883a3ea7a0fbbd4cc10a0bd4f6bb46d173e12ac368ee16c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"book_id\",\"type\":\"uint256\"},{\"name\":\"borrower_id\",\"type\":\"uint256\"},{\"name\":\"new_state\",\"type\":\"uint256\"}],\"name\":\"updateBook\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"book_id\",\"type\":\"uint256\"}],\"name\":\"deleteBook\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"deleteUser\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"borrower_id\",\"type\":\"uint256\"},{\"name\":\"book_id\",\"type\":\"uint256\"}],\"name\":\"testOnly\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"borrower_id\",\"type\":\"uint256\"},{\"name\":\"book_id\",\"type\":\"uint256\"}],\"name\":\"borrowBook\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"getBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"clearFine\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"uint256\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"userLogin\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBorrowedBooks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFinedUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"insertUser\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"adminLogin\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_id\",\"type\":\"uint256\"},{\"name\":\"old_password\",\"type\":\"string\"},{\"name\":\"new_password\",\"type\":\"string\"}],\"name\":\"changePassword\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"borrower_id\",\"type\":\"uint256\"},{\"name\":\"book_id\",\"type\":\"uint256\"}],\"name\":\"returnBook\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"book_id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"insertBook\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tableName\",\"type\":\"bytes\"}],\"name\":\"createEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tableName\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"insertEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"borrower_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"book_id\",\"type\":\"uint256\"}],\"name\":\"borrowEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"borrower_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"book_id\",\"type\":\"uint256\"}],\"name\":\"returnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tableName\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value_name\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"updateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tableName\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"deleteEvent\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATEBOOK = "updateBook";

    public static final String FUNC_DELETEBOOK = "deleteBook";

    public static final String FUNC_GETALLBOOKS = "getAllBooks";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_TESTONLY = "testOnly";

    public static final String FUNC_BORROWBOOK = "borrowBook";

    public static final String FUNC_GETBOOKS = "getBooks";

    public static final String FUNC_CLEARFINE = "clearFine";

    public static final String FUNC_SETADMIN = "setAdmin";

    public static final String FUNC_USERLOGIN = "userLogin";

    public static final String FUNC_GETBORROWEDBOOKS = "getBorrowedBooks";

    public static final String FUNC_GETFINEDUSERS = "getFinedUsers";

    public static final String FUNC_INSERTUSER = "insertUser";

    public static final String FUNC_ADMINLOGIN = "adminLogin";

    public static final String FUNC_CHANGEPASSWORD = "changePassword";

    public static final String FUNC_RETURNBOOK = "returnBook";

    public static final String FUNC_GETALLUSERS = "getAllUsers";

    public static final String FUNC_INSERTBOOK = "insertBook";

    public static final Event CREATEEVENT_EVENT = new Event("createEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event INSERTEVENT_EVENT = new Event("insertEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BORROWEVENT_EVENT = new Event("borrowEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RETURNEVENT_EVENT = new Event("returnEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEEVENT_EVENT = new Event("updateEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DELETEEVENT_EVENT = new Event("deleteEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    protected Back(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt updateBook(BigInteger book_id, BigInteger borrower_id, BigInteger new_state) {
        final Function function = new Function(
                FUNC_UPDATEBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(new_state)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateBook(BigInteger book_id, BigInteger borrower_id, BigInteger new_state, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(new_state)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateBook(BigInteger book_id, BigInteger borrower_id, BigInteger new_state) {
        final Function function = new Function(
                FUNC_UPDATEBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(new_state)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getUpdateBookInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple1<BigInteger> getUpdateBookOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt deleteBook(BigInteger book_id) {
        final Function function = new Function(
                FUNC_DELETEBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteBook(BigInteger book_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteBook(BigInteger book_id) {
        final Function function = new Function(
                FUNC_DELETEBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteBookInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getDeleteBookOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt getAllBooks() {
        final Function function = new Function(
                FUNC_GETALLBOOKS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAllBooks(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETALLBOOKS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAllBooks() {
        final Function function = new Function(
                FUNC_GETALLBOOKS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> getGetAllBooksOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETALLBOOKS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<DynamicBytes>) results.get(1).getValue()),
                convertToNative((List<Uint256>) results.get(2).getValue()),
                convertToNative((List<Uint256>) results.get(3).getValue()),
                convertToNative((List<Uint256>) results.get(4).getValue()),
                convertToNative((List<Uint256>) results.get(5).getValue())
        );
    }

    public TransactionReceipt deleteUser(BigInteger user_id) {
        final Function function = new Function(
                FUNC_DELETEUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteUser(BigInteger user_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteUser(BigInteger user_id) {
        final Function function = new Function(
                FUNC_DELETEUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getDeleteUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getDeleteUserOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt testOnly(BigInteger borrower_id, BigInteger book_id) {
        final Function function = new Function(
                FUNC_TESTONLY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void testOnly(BigInteger borrower_id, BigInteger book_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TESTONLY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTestOnly(BigInteger borrower_id, BigInteger book_id) {
        final Function function = new Function(
                FUNC_TESTONLY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getTestOnlyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TESTONLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getTestOnlyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TESTONLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt borrowBook(BigInteger borrower_id, BigInteger book_id) {
        final Function function = new Function(
                FUNC_BORROWBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void borrowBook(BigInteger borrower_id, BigInteger book_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BORROWBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBorrowBook(BigInteger borrower_id, BigInteger book_id) {
        final Function function = new Function(
                FUNC_BORROWBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getBorrowBookInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BORROWBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getBorrowBookOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BORROWBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt getBooks(BigInteger user_id) {
        final Function function = new Function(
                FUNC_GETBOOKS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getBooks(BigInteger user_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBOOKS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetBooks(BigInteger user_id) {
        final Function function = new Function(
                FUNC_GETBOOKS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetBooksInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBOOKS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple6<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> getGetBooksOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBOOKS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<DynamicBytes>) results.get(1).getValue()),
                convertToNative((List<Uint256>) results.get(2).getValue()),
                convertToNative((List<Uint256>) results.get(3).getValue()),
                convertToNative((List<Uint256>) results.get(4).getValue()),
                convertToNative((List<Uint256>) results.get(5).getValue())
        );
    }

    public TransactionReceipt clearFine(BigInteger user_id) {
        final Function function = new Function(
                FUNC_CLEARFINE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void clearFine(BigInteger user_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CLEARFINE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForClearFine(BigInteger user_id) {
        final Function function = new Function(
                FUNC_CLEARFINE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getClearFineInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CLEARFINE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getClearFineOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CLEARFINE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt setAdmin(String name, String password) {
        final Function function = new Function(
                FUNC_SETADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setAdmin(String name, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAdmin(String name, String password) {
        final Function function = new Function(
                FUNC_SETADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getSetAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt userLogin(BigInteger user_id, String password) {
        final Function function = new Function(
                FUNC_USERLOGIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void userLogin(BigInteger user_id, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERLOGIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserLogin(BigInteger user_id, String password) {
        final Function function = new Function(
                FUNC_USERLOGIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getUserLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERLOGIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getUserLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_USERLOGIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt getBorrowedBooks() {
        final Function function = new Function(
                FUNC_GETBORROWEDBOOKS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getBorrowedBooks(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBORROWEDBOOKS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetBorrowedBooks() {
        final Function function = new Function(
                FUNC_GETBORROWEDBOOKS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> getGetBorrowedBooksOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBORROWEDBOOKS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<DynamicBytes>) results.get(1).getValue()),
                convertToNative((List<Uint256>) results.get(2).getValue()),
                convertToNative((List<Uint256>) results.get(3).getValue()),
                convertToNative((List<Uint256>) results.get(4).getValue()),
                convertToNative((List<Uint256>) results.get(5).getValue())
        );
    }

    public TransactionReceipt getFinedUsers() {
        final Function function = new Function(
                FUNC_GETFINEDUSERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getFinedUsers(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETFINEDUSERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetFinedUsers() {
        final Function function = new Function(
                FUNC_GETFINEDUSERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<List<BigInteger>, List<byte[]>, List<BigInteger>> getGetFinedUsersOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETFINEDUSERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<List<BigInteger>, List<byte[]>, List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<DynamicBytes>) results.get(1).getValue()),
                convertToNative((List<Uint256>) results.get(2).getValue())
        );
    }

    public TransactionReceipt insertUser(BigInteger user_id, byte[] name) {
        final Function function = new Function(
                FUNC_INSERTUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertUser(BigInteger user_id, byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertUser(BigInteger user_id, byte[] name) {
        final Function function = new Function(
                FUNC_INSERTUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, byte[]> getInsertUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, byte[]>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getInsertUserOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt adminLogin(String name, String password) {
        final Function function = new Function(
                FUNC_ADMINLOGIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void adminLogin(String name, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADMINLOGIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAdminLogin(String name, String password) {
        final Function function = new Function(
                FUNC_ADMINLOGIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAdminLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADMINLOGIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getAdminLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADMINLOGIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt changePassword(BigInteger user_id, String old_password, String new_password) {
        final Function function = new Function(
                FUNC_CHANGEPASSWORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_password),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void changePassword(BigInteger user_id, String old_password, String new_password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEPASSWORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_password),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_password)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangePassword(BigInteger user_id, String old_password, String new_password) {
        final Function function = new Function(
                FUNC_CHANGEPASSWORD,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(user_id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(old_password),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(new_password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getChangePasswordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEPASSWORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
        );
    }

    public Tuple1<BigInteger> getChangePasswordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHANGEPASSWORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt returnBook(BigInteger borrower_id, BigInteger book_id) {
        final Function function = new Function(
                FUNC_RETURNBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void returnBook(BigInteger borrower_id, BigInteger book_id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RETURNBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReturnBook(BigInteger borrower_id, BigInteger book_id) {
        final Function function = new Function(
                FUNC_RETURNBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(borrower_id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getReturnBookInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RETURNBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getReturnBookOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RETURNBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt getAllUsers() {
        final Function function = new Function(
                FUNC_GETALLUSERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAllUsers(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETALLUSERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAllUsers() {
        final Function function = new Function(
                FUNC_GETALLUSERS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<List<BigInteger>, List<byte[]>, List<BigInteger>> getGetAllUsersOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETALLUSERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<List<BigInteger>, List<byte[]>, List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<DynamicBytes>) results.get(1).getValue()),
                convertToNative((List<Uint256>) results.get(2).getValue())
        );
    }

    public TransactionReceipt insertBook(BigInteger book_id, byte[] name, BigInteger price) {
        final Function function = new Function(
                FUNC_INSERTBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertBook(BigInteger book_id, byte[] name, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertBook(BigInteger book_id, byte[] name, BigInteger price) {
        final Function function = new Function(
                FUNC_INSERTBOOK,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(book_id),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, byte[], BigInteger> getInsertBookInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, byte[], BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple1<BigInteger> getInsertBookOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTBOOK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public List<CreateEventEventResponse> getCreateEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEEVENT_EVENT, transactionReceipt);
        ArrayList<CreateEventEventResponse> responses = new ArrayList<CreateEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateEventEventResponse typedResponse = new CreateEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.creater = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tableName = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertEventEventResponse> getInsertEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTEVENT_EVENT, transactionReceipt);
        ArrayList<InsertEventEventResponse> responses = new ArrayList<InsertEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertEventEventResponse typedResponse = new InsertEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tableName = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<BorrowEventEventResponse> getBorrowEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BORROWEVENT_EVENT, transactionReceipt);
        ArrayList<BorrowEventEventResponse> responses = new ArrayList<BorrowEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BorrowEventEventResponse typedResponse = new BorrowEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.borrower_id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.book_id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeBorrowEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(BORROWEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeBorrowEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(BORROWEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ReturnEventEventResponse> getReturnEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNEVENT_EVENT, transactionReceipt);
        ArrayList<ReturnEventEventResponse> responses = new ArrayList<ReturnEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnEventEventResponse typedResponse = new ReturnEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.borrower_id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.book_id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeReturnEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RETURNEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeReturnEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RETURNEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateEventEventResponse> getUpdateEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateEventEventResponse> responses = new ArrayList<UpdateEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateEventEventResponse typedResponse = new UpdateEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value_name = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.new_value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeleteEventEventResponse> getDeleteEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELETEEVENT_EVENT, transactionReceipt);
        ArrayList<DeleteEventEventResponse> responses = new ArrayList<DeleteEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteEventEventResponse typedResponse = new DeleteEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeleteEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeleteEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DELETEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Back load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Back(contractAddress, client, credential);
    }

    public static Back deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Back.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateEventEventResponse {
        public TransactionReceipt.Logs log;

        public String creater;

        public byte[] tableName;
    }

    public static class InsertEventEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public byte[] tableName;

        public BigInteger id;
    }

    public static class BorrowEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger borrower_id;

        public BigInteger book_id;
    }

    public static class ReturnEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger borrower_id;

        public BigInteger book_id;
    }

    public static class UpdateEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] tableName;

        public BigInteger id;

        public byte[] value_name;

        public BigInteger new_value;
    }

    public static class DeleteEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] tableName;

        public BigInteger id;
    }
}