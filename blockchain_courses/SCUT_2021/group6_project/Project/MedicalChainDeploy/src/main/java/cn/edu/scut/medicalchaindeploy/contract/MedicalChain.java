package cn.edu.scut.medicalchaindeploy.contract;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.*;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class MedicalChain extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","","8181036040830152614d878189614ae1565b90508181036060830152614d9b8188614b4f565b90508181036080830152614daf8187614ae1565b905081810360a0830152614dc38186614ae1565b905081810360c0830152614dd78185614ae1565b905081810360e0830152614deb8184614a86565b90509998505050505050505050565b600060e0820190508181036000830152614e14818a614a2b565b90508181036020830152614e288189614b4f565b90508181036040830152614e3c8188614b4f565b90508181036060830152614e508187614ae1565b90508181036080830152614e648186614ae1565b905081810360a0830152614e788185614ae1565b905081810360c0830152614e8c8184614a86565b905098975050505050505050565b60006020820190508181036000830152614eb48184614b4f565b905092915050565b600060e0820190508181036000830152614ed6818a614b4f565b90508181036020830152614eea8189614ae1565b90508181036040830152614efe8188614b4f565b90508181036060830152614f128187614ae1565b90508181036080830152614f268186614ae1565b905081810360a0830152614f3a8185614ae1565b905081810360c0830152614f4e8184614a86565b905098975050505050505050565b6000602082019050614f716000830184614bb9565b92915050565b60006080820190508181036000830152614f918187614bc8565b9050614fa06020830186614a1c565b8181036040830152614fb28185614bc8565b90508181036060830152614fc68184614bc8565b905095945050505050565b6000602082019050614fe66000830184614c34565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561500f57600080fd5b8060405250919050565b600067ffffffffffffffff82111561503057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561518657808201518184015260208101905061516b565b83811115615195576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058206637e07c9a5d479f5420e9d3053bcf0af1eb81a2b55f9f1030c6532219deee4b6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","","8181036040830152614d878189614ae1565b90508181036060830152614d9b8188614b4f565b90508181036080830152614daf8187614ae1565b905081810360a0830152614dc38186614ae1565b905081810360c0830152614dd78185614ae1565b905081810360e0830152614deb8184614a86565b90509998505050505050505050565b600060e0820190508181036000830152614e14818a614a2b565b90508181036020830152614e288189614b4f565b90508181036040830152614e3c8188614b4f565b90508181036060830152614e508187614ae1565b90508181036080830152614e648186614ae1565b905081810360a0830152614e788185614ae1565b905081810360c0830152614e8c8184614a86565b905098975050505050505050565b60006020820190508181036000830152614eb48184614b4f565b905092915050565b600060e0820190508181036000830152614ed6818a614b4f565b90508181036020830152614eea8189614ae1565b90508181036040830152614efe8188614b4f565b90508181036060830152614f128187614ae1565b90508181036080830152614f268186614ae1565b905081810360a0830152614f3a8185614ae1565b905081810360c0830152614f4e8184614a86565b905098975050505050505050565b6000602082019050614f716000830184614bb9565b92915050565b60006080820190508181036000830152614f918187614bc8565b9050614fa06020830186614a1c565b8181036040830152614fb28185614bc8565b90508181036060830152614fc68184614bc8565b905095945050505050565b6000602082019050614fe66000830184614c34565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561500f57600080fd5b8060405250919050565b600067ffffffffffffffff82111561503057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561518657808201518184015260208101905061516b565b83811115615195576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582082414142c40e8134fa4fc2e7c8b339697dcc258fc39285a10935410a1396792a6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_location\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNotUsedResourcesCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"location\",\"type\":\"string\"}],\"name\":\"getAllResourcesCntByLocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_resource_id\",\"type\":\"uint256\"}],\"name\":\"getLogByRid\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"resource_num\",\"type\":\"uint256\"},{\"name\":\"resource_name\",\"type\":\"string\"},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"batch_code\",\"type\":\"string\"},{\"name\":\"img_url\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"registerResource\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUserCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resource_id\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"string\"},{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"deleteResource\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"location\",\"type\":\"string\"}],\"name\":\"getNotUsedResourcesCntByLocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyResourcesInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"string\"}],\"name\":\"getAllResourcesInfoByCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_resource_id\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"string\"},{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"transferResource\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"location\",\"type\":\"string\"}],\"name\":\"getAllResourcesInfoByLocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"changeRole\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllResourcesCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFactoryCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllResourcesInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyResourcesId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_GETNOTUSEDRESOURCESCNT = "getNotUsedResourcesCnt";

    public static final String FUNC_GETALLRESOURCESCNTBYLOCATION = "getAllResourcesCntByLocation";

    public static final String FUNC_GETLOGBYRID = "getLogByRid";

    public static final String FUNC_REGISTERRESOURCE = "registerResource";

    public static final String FUNC_GETUSERCNT = "getUserCnt";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_GETUSERINFOBYADDRESS = "getUserInfoByAddress";

    public static final String FUNC_DELETERESOURCE = "deleteResource";

    public static final String FUNC_GETNOTUSEDRESOURCESCNTBYLOCATION = "getNotUsedResourcesCntByLocation";

    public static final String FUNC_GETMYRESOURCESINFO = "getMyResourcesInfo";

    public static final String FUNC_GETALLRESOURCESINFOBYCATEGORY = "getAllResourcesInfoByCategory";

    public static final String FUNC_TRANSFERRESOURCE = "transferResource";

    public static final String FUNC_GETALLRESOURCESINFOBYLOCATION = "getAllResourcesInfoByLocation";

    public static final String FUNC_CHANGEROLE = "changeRole";

    public static final String FUNC_GETALLRESOURCESCNT = "getAllResourcesCnt";

    public static final String FUNC_GETFACTORYCNT = "getFactoryCnt";

    public static final String FUNC_GETALLRESOURCESINFO = "getAllResourcesInfo";

    public static final String FUNC_GETMYRESOURCESID = "getMyResourcesId";

    protected MedicalChain(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt registerUser(String _name, String _location) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new Utf8String(_name),
                new Utf8String(_location)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerUser(String _name, String _location, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new Utf8String(_name),
                new Utf8String(_location)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterUser(String _name, String _location) {
        final Function function = new Function(
                FUNC_REGISTERUSER, 
                Arrays.<Type>asList(new Utf8String(_name),
                new Utf8String(_location)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterUserOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getNotUsedResourcesCnt() {
        final Function function = new Function(
                FUNC_GETNOTUSEDRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getNotUsedResourcesCnt(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETNOTUSEDRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetNotUsedResourcesCnt() {
        final Function function = new Function(
                FUNC_GETNOTUSEDRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetNotUsedResourcesCntOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETNOTUSEDRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getAllResourcesCntByLocation(String location) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAllResourcesCntByLocation(String location, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAllResourcesCntByLocation(String location) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAllResourcesCntByLocationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETALLRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getGetAllResourcesCntByLocationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETALLRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple4<List<String>, List<String>, List<String>, List<String>> getLogByRid(BigInteger _resource_id) throws ContractException {
        final Function function = new Function(FUNC_GETLOGBYRID, 
                Arrays.<Type>asList(new Uint256(_resource_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<List<String>, List<String>, List<String>, List<String>>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()));
    }

    public TransactionReceipt registerResource(BigInteger resource_num, String resource_name, String category, String batch_code, String img_url, String time, String info) {
        final Function function = new Function(
                FUNC_REGISTERRESOURCE, 
                Arrays.<Type>asList(new Uint256(resource_num),
                new Utf8String(resource_name),
                new Utf8String(category),
                new Utf8String(batch_code),
                new Utf8String(img_url),
                new Utf8String(time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerResource(BigInteger resource_num, String resource_name, String category, String batch_code, String img_url, String time, String info, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERRESOURCE, 
                Arrays.<Type>asList(new Uint256(resource_num),
                new Utf8String(resource_name),
                new Utf8String(category),
                new Utf8String(batch_code),
                new Utf8String(img_url),
                new Utf8String(time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterResource(BigInteger resource_num, String resource_name, String category, String batch_code, String img_url, String time, String info) {
        final Function function = new Function(
                FUNC_REGISTERRESOURCE, 
                Arrays.<Type>asList(new Uint256(resource_num),
                new Utf8String(resource_name),
                new Utf8String(category),
                new Utf8String(batch_code),
                new Utf8String(img_url),
                new Utf8String(time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, String, String, String, String, String, String> getRegisterResourceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERRESOURCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, String, String, String, String, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterResourceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTERRESOURCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getUserCnt() {
        final Function function = new Function(
                FUNC_GETUSERCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getUserCnt(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETUSERCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetUserCnt() {
        final Function function = new Function(
                FUNC_GETUSERCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetUserCntOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETUSERCNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getUserInfo() {
        final Function function = new Function(
                FUNC_GETUSERINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getUserInfo(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETUSERINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetUserInfo() {
        final Function function = new Function(
                FUNC_GETUSERINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getGetUserInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETUSERINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt getUserInfoByAddress(String _addr) {
        final Function function = new Function(
                FUNC_GETUSERINFOBYADDRESS, 
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getUserInfoByAddress(String _addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETUSERINFOBYADDRESS, 
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetUserInfoByAddress(String _addr) {
        final Function function = new Function(
                FUNC_GETUSERINFOBYADDRESS, 
                Arrays.<Type>asList(new Address(_addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetUserInfoByAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETUSERINFOBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple4<String, String, String, String> getGetUserInfoByAddressOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETUSERINFOBYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt deleteResource(BigInteger _resource_id, String _time, String info) {
        final Function function = new Function(
                FUNC_DELETERESOURCE, 
                Arrays.<Type>asList(new Uint256(_resource_id),
                new Utf8String(_time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteResource(BigInteger _resource_id, String _time, String info, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETERESOURCE, 
                Arrays.<Type>asList(new Uint256(_resource_id),
                new Utf8String(_time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteResource(BigInteger _resource_id, String _time, String info) {
        final Function function = new Function(
                FUNC_DELETERESOURCE, 
                Arrays.<Type>asList(new Uint256(_resource_id),
                new Utf8String(_time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getDeleteResourceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETERESOURCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getDeleteResourceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETERESOURCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getNotUsedResourcesCntByLocation(String location) {
        final Function function = new Function(
                FUNC_GETNOTUSEDRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getNotUsedResourcesCntByLocation(String location, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETNOTUSEDRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetNotUsedResourcesCntByLocation(String location) {
        final Function function = new Function(
                FUNC_GETNOTUSEDRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetNotUsedResourcesCntByLocationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETNOTUSEDRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getGetNotUsedResourcesCntByLocationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETNOTUSEDRESOURCESCNTBYLOCATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getMyResourcesInfo() {
        final Function function = new Function(
                FUNC_GETMYRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getMyResourcesInfo(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETMYRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetMyResourcesInfo() {
        final Function function = new Function(
                FUNC_GETMYRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<List<BigInteger>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>, List<Boolean>> getGetMyResourcesInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETMYRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<List<BigInteger>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>, List<Boolean>>(

                convertToNative((List<Uint256>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                convertToNative((List<Bool>) results.get(6).getValue())
                );
    }

    public TransactionReceipt getAllResourcesInfoByCategory(String category) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFOBYCATEGORY, 
                Arrays.<Type>asList(new Utf8String(category)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAllResourcesInfoByCategory(String category, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFOBYCATEGORY, 
                Arrays.<Type>asList(new Utf8String(category)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAllResourcesInfoByCategory(String category) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFOBYCATEGORY, 
                Arrays.<Type>asList(new Utf8String(category)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAllResourcesInfoByCategoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETALLRESOURCESINFOBYCATEGORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple7<List<String>, List<BigInteger>, List<String>, List<BigInteger>, List<String>, List<String>, List<Boolean>> getGetAllResourcesInfoByCategoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETALLRESOURCESINFOBYCATEGORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<List<String>, List<BigInteger>, List<String>, List<BigInteger>, List<String>, List<String>, List<Boolean>>(

                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Uint256>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                convertToNative((List<Bool>) results.get(6).getValue())
                );
    }

    public TransactionReceipt transferResource(String _to, BigInteger _resource_id, String _time, String info) {
        final Function function = new Function(
                FUNC_TRANSFERRESOURCE, 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_resource_id),
                new Utf8String(_time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferResource(String _to, BigInteger _resource_id, String _time, String info, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERRESOURCE, 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_resource_id),
                new Utf8String(_time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferResource(String _to, BigInteger _resource_id, String _time, String info) {
        final Function function = new Function(
                FUNC_TRANSFERRESOURCE, 
                Arrays.<Type>asList(new Address(_to),
                new Uint256(_resource_id),
                new Utf8String(_time),
                new Utf8String(info)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, String> getTransferResourceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERRESOURCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferResourceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFERRESOURCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getAllResourcesInfoByLocation(String location) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFOBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAllResourcesInfoByLocation(String location, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFOBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAllResourcesInfoByLocation(String location) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFOBYLOCATION, 
                Arrays.<Type>asList(new Utf8String(location)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetAllResourcesInfoByLocationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETALLRESOURCESINFOBYLOCATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple7<List<String>, List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<String>, List<Boolean>> getGetAllResourcesInfoByLocationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETALLRESOURCESINFOBYLOCATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<List<String>, List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<String>, List<Boolean>>(

                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                convertToNative((List<Bool>) results.get(6).getValue())
                );
    }

    public TransactionReceipt changeRole(String _addr, String _role) {
        final Function function = new Function(
                FUNC_CHANGEROLE, 
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_role)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void changeRole(String _addr, String _role, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEROLE, 
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_role)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeRole(String _addr, String _role) {
        final Function function = new Function(
                FUNC_CHANGEROLE, 
                Arrays.<Type>asList(new Address(_addr),
                new Utf8String(_role)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getChangeRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getChangeRoleOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHANGEROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getAllResourcesCnt() {
        final Function function = new Function(
                FUNC_GETALLRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAllResourcesCnt(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAllResourcesCnt() {
        final Function function = new Function(
                FUNC_GETALLRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetAllResourcesCntOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETALLRESOURCESCNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getFactoryCnt() {
        final Function function = new Function(
                FUNC_GETFACTORYCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getFactoryCnt(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETFACTORYCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetFactoryCnt() {
        final Function function = new Function(
                FUNC_GETFACTORYCNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetFactoryCntOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETFACTORYCNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getAllResourcesInfo() {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getAllResourcesInfo(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetAllResourcesInfo() {
        final Function function = new Function(
                FUNC_GETALLRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<List<String>, List<BigInteger>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>, List<Boolean>> getGetAllResourcesInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETALLRESOURCESINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<List<String>, List<BigInteger>, List<String>, List<BigInteger>, List<String>, List<String>, List<String>, List<Boolean>>(

                convertToNative((List<Address>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Uint256>) results.get(3).getValue()), 
                convertToNative((List<Utf8String>) results.get(4).getValue()), 
                convertToNative((List<Utf8String>) results.get(5).getValue()), 
                convertToNative((List<Utf8String>) results.get(6).getValue()), 
                convertToNative((List<Bool>) results.get(7).getValue())
                );
    }

    public TransactionReceipt getMyResourcesId() {
        final Function function = new Function(
                FUNC_GETMYRESOURCESID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getMyResourcesId(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETMYRESOURCESID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetMyResourcesId() {
        final Function function = new Function(
                FUNC_GETMYRESOURCESID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getGetMyResourcesIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETMYRESOURCESID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
                );
    }

    public static MedicalChain load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MedicalChain(contractAddress, client, credential);
    }

    public static MedicalChain deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MedicalChain.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
