<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.scut.medicalresourceflow.dao.UserDao">
  <resultMap id="BaseResultMap" type="cn.edu.scut.medicalresourceflow.entity.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="mail" jdbcType="VARCHAR" property="mail" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="province" jdbcType="VARCHAR" property="province" />
    <result column="register_at" jdbcType="TIMESTAMP" property="registerAt" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="token_ver" jdbcType="INTEGER" property="tokenVer" />
  </resultMap>
  <resultMap id="UserDTOMap" type="cn.edu.scut.medicalresourceflow.entity.dto.UserDTO">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="mail" jdbcType="VARCHAR" property="mail" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="province" jdbcType="VARCHAR" property="province" />
    <result column="register_at" jdbcType="TIMESTAMP" property="registerAt" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
  </resultMap>
  <sql id="Base_Column_List">
    user_id, mail, `password`, `role`,`name`,`province`, register_at, update_at, token_ver
  </sql>
  <sql id="User_DTO_Column_List">
    user_id, mail, `role`,`name`,`province`, register_at, update_at
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="getUserTokenVerByPrimaryKey" resultType="java.lang.Integer">
    select
    token_ver
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="selectByMail" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"></include>
    from user
    where mail = #{mail,jdbcType=VARCHAR}
  </select>
  <select id="selectByRoleNameProvince" resultMap="UserDTOMap">
    select
    <include refid="User_DTO_Column_List"></include>
    from user
    <trim prefix="where" suffixOverrides="and">
      <if test="role != null">
        `role` = #{role,jdbcType=VARCHAR} and
      </if>
      <if test="name != null">
        `name` like concat("%",#{name,jdbcType=VARCHAR},"%") and
      </if>
      <if test="province != null">
        province = #{province,jdbcType=VARCHAR} and
      </if>
    </trim>

  </select>
  <select id="getCountByRole" resultType="java.lang.Integer" parameterType="java.lang.String">
    select count(*)
    from user
    where role = #{role,jdbcType=VARCHAR}
  </select>
  <select id="selectByProvince" resultMap="UserDTOMap" parameterType="java.lang.String">
    select
    <include refid="User_DTO_Column_List"></include>
    from user
    where province = #{province,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="user_id" keyProperty="userId" parameterType="cn.edu.scut.medicalresourceflow.entity.User" useGeneratedKeys="true">
    insert into user (mail, `password`, `role`, `name`,`province`,
      register_at, update_at, token_ver
      )
    values (#{mail,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR},
            #{name,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR},
            #{registerAt,jdbcType=TIMESTAMP}, #{updateAt,jdbcType=TIMESTAMP}, #{tokenVer,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="user_id" keyProperty="userId" parameterType="cn.edu.scut.medicalresourceflow.entity.User" useGeneratedKeys="true">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="mail != null">
        mail,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="province != null">
        `province`,
      </if>
      <if test="registerAt != null">
        register_at,
      </if>
      <if test="updateAt != null">
        update_at,
      </if>
      <if test="tokenVer != null">
        token_ver,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="mail != null">
        #{mail,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="province != null">
        #{province,jdbcType=VARCHAR},
      </if>
      <if test="registerAt != null">
        #{registerAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="tokenVer != null">
        #{tokenVer,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.scut.medicalresourceflow.entity.User">
    update user
    <set>
      <if test="mail != null">
        mail = #{mail,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="province != null">
        `province` = #{province,jdbcType=VARCHAR},
      </if>
      <if test="registerAt != null">
        register_at = #{registerAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAt != null">
        update_at = #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="tokenVer != null">
        token_ver = #{tokenVer,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.scut.medicalresourceflow.entity.User">
    update user
    set mail = #{mail,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      `role` = #{role,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      `provincee` = #{province,jdbcType=VARCHAR},
      register_at = #{registerAt,jdbcType=TIMESTAMP},
      update_at = #{updateAt,jdbcType=TIMESTAMP},
      token_ver = #{tokenVer,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateTokenVerByPrimaryKey" parameterType="integer">
    update `user`
    set token_ver = token_ver + 1
    where user_id = #{userId, jdbcType=INTEGER}
  </update>
</mapper>