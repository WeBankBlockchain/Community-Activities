package org.fisco.bcos.scutcloud.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AccessControl extends Contract {
    public static final String[] BINARY_ARRAY = {"","","00808260ff16815481101515611af757fe5b9060005260206000209060070201600501805490509050919050565b6000600180549050905090565b600060018260ff16815481101515611b3457fe5b9060005260206000209060060201600101805490509050919050565b60008080549050905090565b6000806000805490501415611b745760009050611c84565b600060ff166004846040518082805190602001908083835b602083101515611bb15780518252602082019150602081019050602083039250611b8c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1660ff1614158015611c8157508160ff166004846040518082805190602001908083835b602083101515611c3a5780518252602082019150602081019050602083039250611c15565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1660ff1614155b90505b92915050565b6000600660008360ff1660ff16815260200190815260200160002060009054906101000a900460ff169050919050565b8460018860ff16815481101515611ccd57fe5b90600052602060002090600602016002019080519060200190611cf1929190613866565b508560018860ff16815481101515611d0557fe5b906000526020600020906006020160000160016101000a81548160ff021916908360ff1602179055508360018860ff16815481101515611d4157fe5b90600052602060002090600602016003019080519060200190611d65929190613866565b508260018860ff16815481101515611d7957fe5b90600052602060002090600602016004019080519060200190611d9d929190613866565b508160018860ff16815481101515611db157fe5b90600052602060002090600602016005019080519060200190611dd5929190613866565b508060018860ff16815481101515611de957fe5b90600052602060002090600602016001019080519060200190611e0d9291906138e6565b50866005866040518082805190602001908083835b602083101515611e475780518252602082019150602081019050602083039250611e22565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908360ff1602179055507f7f413e8746fc07e3a438bda61fd445cced927f311ef454cb56012054c9dab4758786604051808360ff1660ff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611f01578082015181840152602081019050611ee6565b50505050905090810190601f168015611f2e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050505050565b606060008260ff16815481101515611f5957fe5b9060005260206000209060070201600501805480602002602001604051908101604052809291908181526020018280548015611fda57602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411611fa35790505b50505050509050919050565b6000806001805490501415611ffe576000905061210e565b600060ff166005846040518082805190602001908083835b60208310151561203b5780518252602082019150602081019050602083039250612016565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1660ff161415801561210b57508160ff166005846040518082805190602001908083835b6020831015156120c4578051825260208201915060208101905060208303925061209f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1660ff1614155b90505b92915050565b60006005826040518082805190602001908083835b60208310151561214e5780518252602082019150602081019050602083039250612129565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169050919050565b606060008260ff168154811015156121aa57fe5b906000526020600020906007020160060180548060200260200160405190810160405280929190818152602001828054801561222b57602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116121f45790505b50505050509050919050565b8360008660ff1681548110151561224a57fe5b9060005260206000209060070201600101908051906020019061226e929190613866565b508260008660ff1681548110151561228257fe5b906000526020600020906007020160020190805190602001906122a6929190613866565b508160008660ff168154811015156122ba57fe5b906000526020600020906007020160030190805190602001906122de929190613866565b508060008660ff168154811015156122f257fe5b906000526020600020906007020160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550846004856040518082805190602001908083835b6020831015156123d257805182526020820191506020810190506020830392506123ad565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908360ff1602179055507f0e666c3613a538c50e0658bd1dd783d9690fdbb5614ce412e36b57e0acf41f0e858583604051808460ff1660ff168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156124bf5780820151818401526020810190506124a4565b50505050905090810190601f1680156124ec5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15050505050565b606060018260ff1681548110151561251657fe5b906000526020600020906006020160010180548060200260200160405190810160405280929190818152602001828054801561259757602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116125605790505b50505050509050919050565b6000808054905090506000610100604051908101604052808360ff168152602001600060ff1681526020018681526020018581526020016040805190810160405280600181526020017f200000000000000000000000000000000000000000000000000000000000000081525081526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160006040519080825280602002602001820160405280156126615781602001602082028038833980820191505090505b50815260200160006040519080825280602002602001820160405280156126975781602001602082028038833980820191505090505b508152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550604082015181600101908051906020019061272492919061398d565b50606082015181600201908051906020019061274192919061398d565b50608082015181600301908051906020019061275e92919061398d565b5060a08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050190805190602001906127c2929190613a0d565b5060e08201518160060190805190602001906127df929190613a0d565b5050505080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550806004856040518082805190602001908083835b602083101515612874578051825260208201915060208101905060208303925061284f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908360ff1602179055507f3af986c49c92e7a60aff07a201d6787cdd9ce4b5e4d8f9cce20c4eae2e9d2d84818584604051808460ff1660ff168152602001806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612961578082015181840152602081019050612946565b50505050905090810190601f16801561298e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a150505050565b60018160ff168154811015156129b557fe5b906000526020600020906006020160000160019054906101000a900460ff1660008360ff168154811015156129e657fe5b906000526020600020906007020160000160018282829054906101000a900460ff160392506101000a81548160ff021916908360ff16021790555060018160ff16815481101515612a3357fe5b906000526020600020906006020160000160019054906101000a900460ff166000600660008460ff1660ff16815260200190815260200160002060009054906101000a900460ff1660ff16815481101515612a8a57fe5b906000526020600020906007020160000160018282829054906101000a900460ff160192506101000a81548160ff021916908360ff16021790555060018160ff16815481101515612ad757fe5b9060005260206000209060060201","","0257600081816101000a81549060ff021916905550600101613adf565b5090565b905600a165627a7a72305820121ae436c22eb6430a346de8ebff61d4fb49ef8210de158f0c8fd65b852ef1370029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","0257600081816101000a81549060ff021916905550600101613adf565b5090565b905600a165627a7a7230582037287592badde8b93a52e9b4e691ac50d4b4f3ef97b51ebe9b90d34c8ca7fa140029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"isExitUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMsgLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dataId\",\"type\":\"uint8\"},{\"name\":\"_userId\",\"type\":\"uint8\"}],\"name\":\"checkList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeId\",\"type\":\"uint256\"}],\"name\":\"freeApproved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"fnameToid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"msgs\",\"outputs\":[{\"name\":\"reqId\",\"type\":\"uint8\"},{\"name\":\"resId\",\"type\":\"uint8\"},{\"name\":\"dataId\",\"type\":\"uint8\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"text\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"userId\",\"type\":\"uint8\"},{\"name\":\"credit\",\"type\":\"uint8\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"pwd\",\"type\":\"string\"},{\"name\":\"userDescription\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getAccessibleLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDataLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getNotAllowedLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"isExitUserName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"fdataToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataId\",\"type\":\"uint8\"},{\"name\":\"_credit\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_not\",\"type\":\"uint8[]\"}],\"name\":\"alterData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getAccessible\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"isExitDataName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"fdnameToid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getMsgList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_pwd\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"alterUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getNotAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userName\",\"type\":\"string\"},{\"name\":\"_pwd\",\"type\":\"string\"},{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"createUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint8\"},{\"name\":\"_dataId\",\"type\":\"uint8\"}],\"name\":\"shareRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"datas\",\"outputs\":[{\"name\":\"dataId\",\"type\":\"uint8\"},{\"name\":\"dataCredit\",\"type\":\"uint8\"},{\"name\":\"downloadTimes\",\"type\":\"uint8\"},{\"name\":\"dataName\",\"type\":\"string\"},{\"name\":\"dataDescription\",\"type\":\"string\"},{\"name\":\"dataAddress\",\"type\":\"string\"},{\"name\":\"dataType\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getMsgListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint8\"},{\"name\":\"_dataId\",\"type\":\"uint8\"},{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"freeRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromUserId\",\"type\":\"uint8\"},{\"name\":\"_integralNum\",\"type\":\"uint8\"},{\"name\":\"_toUserId\",\"type\":\"uint8\"}],\"name\":\"transIntegral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"fadToid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint8\"},{\"name\":\"_dataId\",\"type\":\"uint8\"}],\"name\":\"freeRequestWithoutApproved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"uint8\"},{\"name\":\"_credit\",\"type\":\"uint8\"},{\"name\":\"_not\",\"type\":\"uint8[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"createData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeId\",\"type\":\"uint256\"}],\"name\":\"freeDenied\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userId\",\"type\":\"uint8\"},{\"name\":\"_dataId\",\"type\":\"uint8\"}],\"name\":\"checkCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dataId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dataName\",\"type\":\"string\"}],\"name\":\"NewData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"AlterUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"\",\"type\":\"string\"}],\"name\":\"AlterData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dataId\",\"type\":\"uint8\"}],\"name\":\"RequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dataId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"msgId\",\"type\":\"uint256\"}],\"name\":\"FreeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"freeId\",\"type\":\"ui","nt256\"}],\"name\":\"FreeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"freeId\",\"type\":\"uint256\"}],\"name\":\"FreeDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fromUserId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"integralNum\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"toUserId\",\"type\":\"uint8\"}],\"name\":\"TransIntegral\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ISEXITUSERADDRESS = "isExitUserAddress";

    public static final String FUNC_GETMSGLENGTH = "getMsgLength";

    public static final String FUNC_CHECKLIST = "checkList";

    public static final String FUNC_FREEAPPROVED = "freeApproved";

    public static final String FUNC_FNAMETOID = "fnameToid";

    public static final String FUNC_MSGS = "msgs";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_GETACCESSIBLELENGTH = "getAccessibleLength";

    public static final String FUNC_GETDATALENGTH = "getDataLength";

    public static final String FUNC_GETNOTALLOWEDLENGTH = "getNotAllowedLength";

    public static final String FUNC_GETUSERLENGTH = "getUserLength";

    public static final String FUNC_ISEXITUSERNAME = "isExitUserName";

    public static final String FUNC_FDATATOOWNER = "fdataToOwner";

    public static final String FUNC_ALTERDATA = "alterData";

    public static final String FUNC_GETACCESSIBLE = "getAccessible";

    public static final String FUNC_ISEXITDATANAME = "isExitDataName";

    public static final String FUNC_FDNAMETOID = "fdnameToid";

    public static final String FUNC_GETMSGLIST = "getMsgList";

    public static final String FUNC_ALTERUSER = "alterUser";

    public static final String FUNC_GETNOTALLOWED = "getNotAllowed";

    public static final String FUNC_CREATEUSER = "createUser";

    public static final String FUNC_SHAREREQUEST = "shareRequest";

    public static final String FUNC_DATAS = "datas";

    public static final String FUNC_GETMSGLISTLENGTH = "getMsgListLength";

    public static final String FUNC_FREEREQUEST = "freeRequest";

    public static final String FUNC_TRANSINTEGRAL = "transIntegral";

    public static final String FUNC_FADTOID = "fadToid";

    public static final String FUNC_FREEREQUESTWITHOUTAPPROVED = "freeRequestWithoutApproved";

    public static final String FUNC_CREATEDATA = "createData";

    public static final String FUNC_FREEDENIED = "freeDenied";

    public static final String FUNC_CHECKCREDIT = "checkCredit";

    public static final Event NEWUSER_EVENT = new Event("NewUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWDATA_EVENT = new Event("NewData", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ALTERUSER_EVENT = new Event("AlterUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ALTERDATA_EVENT = new Event("AlterData", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTAPPROVED_EVENT = new Event("RequestApproved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event FREEREQUEST_EVENT = new Event("FreeRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FREEAPPROVED_EVENT = new Event("FreeApproved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event FREEDENIED_EVENT = new Event("FreeDenied", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSINTEGRAL_EVENT = new Event("TransIntegral", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
    ;

    protected AccessControl(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Boolean isExitUserAddress(String _userAddress, BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_ISEXITUSERADDRESS, 
                Arrays.<Type>asList(new Address(_userAddress),
                new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getMsgLength() throws ContractException {
        final Function function = new Function(FUNC_GETMSGLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean checkList(BigInteger _dataId, BigInteger _userId) throws ContractException {
        final Function function = new Function(FUNC_CHECKLIST, 
                Arrays.<Type>asList(new Uint8(_dataId),
                new Uint8(_userId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt freeApproved(BigInteger _freeId) {
        final Function function = new Function(
                FUNC_FREEAPPROVED, 
                Arrays.<Type>asList(new Uint256(_freeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeApproved(BigInteger _freeId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEAPPROVED, 
                Arrays.<Type>asList(new Uint256(_freeId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeApproved(BigInteger _freeId) {
        final Function function = new Function(
                FUNC_FREEAPPROVED, 
                Arrays.<Type>asList(new Uint256(_freeId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getFreeApprovedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEAPPROVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger fnameToid(String _name) throws ContractException {
        final Function function = new Function(FUNC_FNAMETOID, 
                Arrays.<Type>asList(new Utf8String(_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String> msgs(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_MSGS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue());
    }

    public Tuple6<BigInteger, BigInteger, String, String, String, String> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, String, String, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue());
    }

    public BigInteger getAccessibleLength(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETACCESSIBLELENGTH, 
                Arrays.<Type>asList(new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getDataLength() throws ContractException {
        final Function function = new Function(FUNC_GETDATALENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getNotAllowedLength(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETNOTALLOWEDLENGTH, 
                Arrays.<Type>asList(new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getUserLength() throws ContractException {
        final Function function = new Function(FUNC_GETUSERLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean isExitUserName(String _username, BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_ISEXITUSERNAME, 
                Arrays.<Type>asList(new Utf8String(_username),
                new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger fdataToOwner(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_FDATATOOWNER, 
                Arrays.<Type>asList(new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt alterData(BigInteger _dataId, BigInteger _credit, String _name, String _description, String _address, String _type, List<BigInteger> _not) {
        final Function function = new Function(
                FUNC_ALTERDATA, 
                Arrays.<Type>asList(new Uint8(_dataId),
                new Uint8(_credit),
                new Utf8String(_name),
                new Utf8String(_description),
                new Utf8String(_address),
                new Utf8String(_type),
                _not.isEmpty()? DynamicArray.empty("uint8[]"):new DynamicArray<Uint8>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_not, Uint8.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void alterData(BigInteger _dataId, BigInteger _credit, String _name, String _description, String _address, String _type, List<BigInteger> _not, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ALTERDATA, 
                Arrays.<Type>asList(new Uint8(_dataId),
                new Uint8(_credit),
                new Utf8String(_name),
                new Utf8String(_description),
                new Utf8String(_address),
                new Utf8String(_type),
                _not.isEmpty()? DynamicArray.empty("uint8[]"):new DynamicArray<Uint8>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_not, Uint8.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAlterData(BigInteger _dataId, BigInteger _credit, String _name, String _description, String _address, String _type, List<BigInteger> _not) {
        final Function function = new Function(
                FUNC_ALTERDATA, 
                Arrays.<Type>asList(new Uint8(_dataId),
                new Uint8(_credit),
                new Utf8String(_name),
                new Utf8String(_description),
                new Utf8String(_address),
                new Utf8String(_type),
                _not.isEmpty()? DynamicArray.empty("uint8[]"):new DynamicArray<Uint8>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_not, Uint8.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, BigInteger, String, String, String, String, List<BigInteger>> getAlterDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ALTERDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, BigInteger, String, String, String, String, List<BigInteger>>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                convertToNative((List<Uint8>) results.get(6).getValue())
                );
    }

    public List getAccessible(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETACCESSIBLE, 
                Arrays.<Type>asList(new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Boolean isExitDataName(String _name, BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_ISEXITDATANAME, 
                Arrays.<Type>asList(new Utf8String(_name),
                new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger fdnameToid(String _name) throws ContractException {
        final Function function = new Function(FUNC_FDNAMETOID, 
                Arrays.<Type>asList(new Utf8String(_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getMsgList(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETMSGLIST, 
                Arrays.<Type>asList(new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt alterUser(BigInteger _userId, String _name, String _pwd, String _description, String _address) {
        final Function function = new Function(
                FUNC_ALTERUSER, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Utf8String(_name),
                new Utf8String(_pwd),
                new Utf8String(_description),
                new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void alterUser(BigInteger _userId, String _name, String _pwd, String _description, String _address, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ALTERUSER, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Utf8String(_name),
                new Utf8String(_pwd),
                new Utf8String(_description),
                new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAlterUser(BigInteger _userId, String _name, String _pwd, String _description, String _address) {
        final Function function = new Function(
                FUNC_ALTERUSER, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Utf8String(_name),
                new Utf8String(_pwd),
                new Utf8String(_description),
                new Address(_address)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, String, String, String, String> getAlterUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ALTERUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public List getNotAllowed(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETNOTALLOWED, 
                Arrays.<Type>asList(new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt createUser(String _userName, String _pwd, String _userAddress) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(new Utf8String(_userName),
                new Utf8String(_pwd),
                new Address(_userAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createUser(String _userName, String _pwd, String _userAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(new Utf8String(_userName),
                new Utf8String(_pwd),
                new Address(_userAddress)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateUser(String _userName, String _pwd, String _userAddress) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(new Utf8String(_userName),
                new Utf8String(_pwd),
                new Address(_userAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCreateUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt shareRequest(BigInteger _userId, BigInteger _dataId) {
        final Function function = new Function(
                FUNC_SHAREREQUEST, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void shareRequest(BigInteger _userId, BigInteger _dataId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SHAREREQUEST, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForShareRequest(BigInteger _userId, BigInteger _dataId) {
        final Function function = new Function(
                FUNC_SHAREREQUEST, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getShareRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SHAREREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple7<BigInteger, BigInteger, BigInteger, String, String, String, String> datas(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_DATAS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, BigInteger, BigInteger, String, String, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue());
    }

    public BigInteger getMsgListLength(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETMSGLISTLENGTH, 
                Arrays.<Type>asList(new Uint8(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt freeRequest(BigInteger _userId, BigInteger _dataId, String _text) {
        final Function function = new Function(
                FUNC_FREEREQUEST, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId),
                new Utf8String(_text)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeRequest(BigInteger _userId, BigInteger _dataId, String _text, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEREQUEST, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId),
                new Utf8String(_text)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeRequest(BigInteger _userId, BigInteger _dataId, String _text) {
        final Function function = new Function(
                FUNC_FREEREQUEST, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId),
                new Utf8String(_text)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getFreeRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEREQUEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt transIntegral(BigInteger _fromUserId, BigInteger _integralNum, BigInteger _toUserId) {
        final Function function = new Function(
                FUNC_TRANSINTEGRAL, 
                Arrays.<Type>asList(new Uint8(_fromUserId),
                new Uint8(_integralNum),
                new Uint8(_toUserId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transIntegral(BigInteger _fromUserId, BigInteger _integralNum, BigInteger _toUserId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSINTEGRAL, 
                Arrays.<Type>asList(new Uint8(_fromUserId),
                new Uint8(_integralNum),
                new Uint8(_toUserId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransIntegral(BigInteger _fromUserId, BigInteger _integralNum, BigInteger _toUserId) {
        final Function function = new Function(
                FUNC_TRANSINTEGRAL, 
                Arrays.<Type>asList(new Uint8(_fromUserId),
                new Uint8(_integralNum),
                new Uint8(_toUserId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getTransIntegralInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSINTEGRAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger fadToid(String _ad) throws ContractException {
        final Function function = new Function(FUNC_FADTOID, 
                Arrays.<Type>asList(new Address(_ad)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt freeRequestWithoutApproved(BigInteger _userId, BigInteger _dataId) {
        final Function function = new Function(
                FUNC_FREEREQUESTWITHOUTAPPROVED, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeRequestWithoutApproved(BigInteger _userId, BigInteger _dataId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEREQUESTWITHOUTAPPROVED, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeRequestWithoutApproved(BigInteger _userId, BigInteger _dataId) {
        final Function function = new Function(
                FUNC_FREEREQUESTWITHOUTAPPROVED, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getFreeRequestWithoutApprovedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEREQUESTWITHOUTAPPROVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt createData(BigInteger _owner, BigInteger _credit, List<BigInteger> _not, String _name, String _description, String _address, String _type) {
        final Function function = new Function(
                FUNC_CREATEDATA, 
                Arrays.<Type>asList(new Uint8(_owner),
                new Uint8(_credit),
                _not.isEmpty()? DynamicArray.empty("uint8[]"):new DynamicArray<Uint8>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_not, Uint8.class)),
                new Utf8String(_name),
                new Utf8String(_description),
                new Utf8String(_address),
                new Utf8String(_type)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createData(BigInteger _owner, BigInteger _credit, List<BigInteger> _not, String _name, String _description, String _address, String _type, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEDATA, 
                Arrays.<Type>asList(new Uint8(_owner),
                new Uint8(_credit),
                _not.isEmpty()? DynamicArray.empty("uint8[]"):new DynamicArray<Uint8>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_not, Uint8.class)),
                new Utf8String(_name),
                new Utf8String(_description),
                new Utf8String(_address),
                new Utf8String(_type)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateData(BigInteger _owner, BigInteger _credit, List<BigInteger> _not, String _name, String _description, String _address, String _type) {
        final Function function = new Function(
                FUNC_CREATEDATA, 
                Arrays.<Type>asList(new Uint8(_owner),
                new Uint8(_credit),
                _not.isEmpty()? DynamicArray.empty("uint8[]"):new DynamicArray<Uint8>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_not, Uint8.class)),
                new Utf8String(_name),
                new Utf8String(_description),
                new Utf8String(_address),
                new Utf8String(_type)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, BigInteger, List<BigInteger>, String, String, String, String> getCreateDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, BigInteger, List<BigInteger>, String, String, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                convertToNative((List<Uint8>) results.get(2).getValue()), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue()
                );
    }

    public TransactionReceipt freeDenied(BigInteger _freeId) {
        final Function function = new Function(
                FUNC_FREEDENIED, 
                Arrays.<Type>asList(new Uint256(_freeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void freeDenied(BigInteger _freeId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREEDENIED, 
                Arrays.<Type>asList(new Uint256(_freeId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeDenied(BigInteger _freeId) {
        final Function function = new Function(
                FUNC_FREEDENIED, 
                Arrays.<Type>asList(new Uint256(_freeId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getFreeDeniedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREEDENIED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Boolean checkCredit(BigInteger _userId, BigInteger _dataId) throws ContractException {
        final Function function = new Function(FUNC_CHECKCREDIT, 
                Arrays.<Type>asList(new Uint8(_userId),
                new Uint8(_dataId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List<NewUserEventResponse> getNewUserEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWUSER_EVENT, transactionReceipt);
        ArrayList<NewUserEventResponse> responses = new ArrayList<NewUserEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewUserEventResponse typedResponse = new NewUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.userAddress = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewUserEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWUSER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewUserEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWUSER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NewDataEventResponse> getNewDataEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDATA_EVENT, transactionReceipt);
        ArrayList<NewDataEventResponse> responses = new ArrayList<NewDataEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewDataEventResponse typedResponse = new NewDataEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.dataId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dataName = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewDataEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewDataEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AlterUserEventResponse> getAlterUserEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ALTERUSER_EVENT, transactionReceipt);
        ArrayList<AlterUserEventResponse> responses = new ArrayList<AlterUserEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AlterUserEventResponse typedResponse = new AlterUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.AlterUserParam0 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.AlterUserParam1 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.AlterUserParam2 = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAlterUserEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ALTERUSER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAlterUserEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ALTERUSER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<AlterDataEventResponse> getAlterDataEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ALTERDATA_EVENT, transactionReceipt);
        ArrayList<AlterDataEventResponse> responses = new ArrayList<AlterDataEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AlterDataEventResponse typedResponse = new AlterDataEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.AlterDataParam0 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.AlterDataParam1 = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAlterDataEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ALTERDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAlterDataEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ALTERDATA_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestApprovedEventResponse> getRequestApprovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTAPPROVED_EVENT, transactionReceipt);
        ArrayList<RequestApprovedEventResponse> responses = new ArrayList<RequestApprovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RequestApprovedEventResponse typedResponse = new RequestApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dataId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestApprovedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestApprovedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FreeRequestEventResponse> getFreeRequestEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FREEREQUEST_EVENT, transactionReceipt);
        ArrayList<FreeRequestEventResponse> responses = new ArrayList<FreeRequestEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FreeRequestEventResponse typedResponse = new FreeRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dataId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.msgId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFreeRequestEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFreeRequestEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FreeApprovedEventResponse> getFreeApprovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FREEAPPROVED_EVENT, transactionReceipt);
        ArrayList<FreeApprovedEventResponse> responses = new ArrayList<FreeApprovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FreeApprovedEventResponse typedResponse = new FreeApprovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.freeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFreeApprovedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFreeApprovedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEAPPROVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FreeDeniedEventResponse> getFreeDeniedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FREEDENIED_EVENT, transactionReceipt);
        ArrayList<FreeDeniedEventResponse> responses = new ArrayList<FreeDeniedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FreeDeniedEventResponse typedResponse = new FreeDeniedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.freeId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFreeDeniedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEDENIED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFreeDeniedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FREEDENIED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransIntegralEventResponse> getTransIntegralEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSINTEGRAL_EVENT, transactionReceipt);
        ArrayList<TransIntegralEventResponse> responses = new ArrayList<TransIntegralEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransIntegralEventResponse typedResponse = new TransIntegralEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromUserId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.integralNum = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.toUserId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransIntegralEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSINTEGRAL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransIntegralEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSINTEGRAL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static AccessControl load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AccessControl(contractAddress, client, credential);
    }

    public static AccessControl deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(AccessControl.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class NewUserEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger userId;

        public String userName;

        public String userAddress;
    }

    public static class NewDataEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger dataId;

        public String dataName;
    }

    public static class AlterUserEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger AlterUserParam0;

        public String AlterUserParam1;

        public String AlterUserParam2;
    }

    public static class AlterDataEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger AlterDataParam0;

        public String AlterDataParam1;
    }

    public static class RequestApprovedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger userId;

        public BigInteger dataId;
    }

    public static class FreeRequestEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger userId;

        public BigInteger dataId;

        public BigInteger msgId;
    }

    public static class FreeApprovedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger freeId;
    }

    public static class FreeDeniedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger freeId;
    }

    public static class TransIntegralEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger fromUserId;

        public BigInteger integralNum;

        public BigInteger toUserId;
    }
}
