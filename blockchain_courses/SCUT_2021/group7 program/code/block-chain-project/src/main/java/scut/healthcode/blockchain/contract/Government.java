package scut.healthcode.blockchain.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Government extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b5061002861002d640100000000026401000000009004565b610185565b600061100190508073ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600c8152602001807f745f676f7665726e6d656e7400000000000000000000000000000000000000008152506020018481038352600a8152602001807f726567696f6e4e616d6500000000000000000000000000000000000000000000815250602001848103825260108152602001807f697344616e6765726f75732c64617465000000000000000000000000000000008152506020019350505050602060405180830381600087803b15801561014657600080fd5b505af115801561015a573d6000803e3d6000fd5b505050506040513d602081101561017057600080fd5b81019080805190602001909291905050505050565b610f6e806101946000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634548d99714610051578063fcd7e3c1146100e2575b600080fd5b34801561005d57600080fd5b506100cc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919050505061016d565b6040518082815260200191505060405180910390f35b3480156100ee57600080fd5b50610149600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506108f9565b60405180848152602001838152602001828152602001935050505060405180910390f35b600080600080600080600080600096506000955060009450600093506101928b6108f9565b8096508197508298505050506101a6610e53565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561020c57600080fd5b505af1158015610220573d6000803e3d6000fd5b505050506040513d602081101561023657600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f726567696f6e4e616d6500000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156103095780820151818401526020810190506102ee565b50505050905090810190601f1680156103365780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561035657600080fd5b505af115801561036a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16638a42ebe98b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f697344616e6765726f757300000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16638a42ebe98a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f646174650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156104d657600080fd5b505af11580156104ea573d6000803e3d6000fd5b505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050600086141561076c578273ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18c848673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b505050506040513d60208110156105c657600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156106a657808201518184015260208101905061068b565b50505050905090810190601f1680156106d35780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156106f457600080fd5b505af1158015610708573d6000803e3d6000fd5b505050506040513d602081101561071e57600080fd5b8101908080519060200190929190505050905060018114156107435760019650610767565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b6108e8565b8273ffffffffffffffffffffffffffffffffffffffff166331afac368c846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561082757808201518184015260208101905061080c565b50505050905090810190601f1680156108545780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561087457600080fd5b505af1158015610888573d6000803e3d6000fd5b505050506040513d602081101561089e57600080fd5b8101908080519060200190929190505050905060018114156108c357600096506108e7565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b5b869750505050505050509392505050565b60008060008060008060008061090d610e53565b94508473ffffffffffffffffffffffffffffffffffffffff1663e8434e398a8773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561099057600080fd5b505af11580156109a4573d6000803e3d6000fd5b505050506040513d60208110156109ba57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610a68578082015181840152602081019050610a4d565b50505050905090810190601f168015610a955780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b8101908080519060200190929190505050935060009250600091508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b5e57600080fd5b505af1158015610b72573d6000803e3d6000fd5b505050506040513d6020811015610b8857600080fd5b810190808051906020019092919050505060001415610bd2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8383829250975097509750610e47565b8373ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050506040513d6020811015610c6c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f697344616e6765726f7573000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610d1f57600080fd5b505af1158015610d33573d6000803e3d6000fd5b505050506040513d6020811015610d4957600080fd5b810190808051906020019092919050505092508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6461746500000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610dfc57600080fd5b505af1158015610e10573d6000803e3d6000fd5b505050506040513d6020811015610e2657600080fd5b81019080805190602001909291905050509150600083838292509750975097505b50505050509193909250565b600080600061100191508173ffffffffffffffffffffffff","ffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600c8152602001807f745f676f7665726e6d656e740000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610efd57600080fd5b505af1158015610f11573d6000803e3d6000fd5b505050506040513d6020811015610f2757600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a723058209d52d34c2a1168aa92b7fd4477f1e05b2b5487f33c6d8112e29d007bb5b5614e0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b5061002861002d640100000000026401000000009004565b610185565b600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001806020018481038452600c8152602001807f745f676f7665726e6d656e7400000000000000000000000000000000000000008152506020018481038352600a8152602001807f726567696f6e4e616d6500000000000000000000000000000000000000000000815250602001848103825260108152602001807f697344616e6765726f75732c64617465000000000000000000000000000000008152506020019350505050602060405180830381600087803b15801561014657600080fd5b505af115801561015a573d6000803e3d6000fd5b505050506040513d602081101561017057600080fd5b81019080805190602001909291905050505050565b610f6e806101946000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635b325d7814610051578063900a970e146100dc575b600080fd5b34801561005d57600080fd5b506100b8600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061016d565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156100e857600080fd5b50610157600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001909291905050506106c7565b6040518082815260200191505060405180910390f35b600080600080600080600080610181610e53565b94508473ffffffffffffffffffffffffffffffffffffffff1663d8ac59578a8773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561020457600080fd5b505af1158015610218573d6000803e3d6000fd5b505050506040513d602081101561022e57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156102dc5780820151818401526020810190506102c1565b50505050905090810190601f1680156103095780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561032957600080fd5b505af115801561033d573d6000803e3d6000fd5b505050506040513d602081101561035357600080fd5b8101908080519060200190929190505050935060009250600091508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b505050506040513d60208110156103fc57600080fd5b810190808051906020019092919050505060001415610446577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83838292509750975097506106bb565b8373ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b505050506040513d60208110156104e057600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f697344616e6765726f7573000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b505050506040513d60208110156105bd57600080fd5b810190808051906020019092919050505092508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6461746500000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561067057600080fd5b505af1158015610684573d6000803e3d6000fd5b505050506040513d602081101561069a57600080fd5b81019080805190602001909291905050509150600083838292509750975097505b50505050509193909250565b600080600080600080600080600096506000955060009450600093506106ec8b61016d565b809650819750829850505050610700610e53565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561076657600080fd5b505af115801561077a573d6000803e3d6000fd5b505050506040513d602081101561079057600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f726567696f6e4e616d6500000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610863578082015181840152602081019050610848565b50505050905090810190601f1680156108905780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156108b057600080fd5b505af11580156108c4573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d8b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600b8152602001807f697344616e6765726f757300000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561097057600080fd5b505af1158015610984573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d8a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f646174650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506000861415610cc6578273ffffffffffffffffffffffffffffffffffffffff1663664b37d68c848673ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b81019080805190602001909291905050506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015610c00578082015181840152602081019050610be5565b50505050905090810190601f168015610c2d5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b505050506040513d6020811015610c7857600080fd5b810190808051906020019092919050505090506001811415610c9d5760019650610cc1565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b610e42565b8273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08c846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610d81578082015181840152602081019050610d66565b50505050905090810190601f168015610dae5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610dce57600080fd5b505af1158015610de2573d6000803e3d6000fd5b505050506040513d6020811015610df857600080fd5b810190808051906020019092919050505090506001811415610e1d5760009650610e41565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b5b869750505050505050509392505050565b600080600061100191508173ffffffffffffffffffffffff","ffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600c8152602001807f745f676f7665726e6d656e740000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015610efd57600080fd5b505af1158015610f11573d6000803e3d6000fd5b505050506040513d6020811015610f2757600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a72305820531604603e780f3382c6a6c5a7acda361898b60be4c45231ea08aca6274338780029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"regionName\",\"type\":\"string\"},{\"name\":\"isDangerous\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"upload_region_info\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"regionName\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPLOAD_REGION_INFO = "upload_region_info";

    public static final String FUNC_SELECT = "select";

    protected Government(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt upload_region_info(String regionName, BigInteger isDangerous, BigInteger date) {
        final Function function = new Function(
                FUNC_UPLOAD_REGION_INFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(regionName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(isDangerous),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void upload_region_info(String regionName, BigInteger isDangerous, BigInteger date, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOAD_REGION_INFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(regionName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(isDangerous),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpload_region_info(String regionName, BigInteger isDangerous, BigInteger date) {
        final Function function = new Function(
                FUNC_UPLOAD_REGION_INFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(regionName),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(isDangerous),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(date)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getUpload_region_infoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOAD_REGION_INFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple1<BigInteger> getUpload_region_infoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOAD_REGION_INFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> select(String regionName) throws ContractException {
        final Function function = new Function(FUNC_SELECT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(regionName)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public static Government load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Government(contractAddress, client, credential);
    }

    public static Government deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Government.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}