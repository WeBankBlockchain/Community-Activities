package scut.healthcode.blockchain.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Util extends Contract {
    public static final String[] BINARY_ARRAY = {"","","a69fae6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f76616c6964506572696f64000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561206657600080fd5b505af115801561207a573d6000803e3d6000fd5b505050506040513d602081101561209057600080fd5b8101908080519060200190929190505050611039565b91505b6120e88a6040805190810160405280600681526020017f745f757365720000000000000000000000000000000000000000000000000000815250610c98565b1561248b576124888173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561219057600080fd5b505af11580156121a4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156121ce57600080fd5b8101908080516401000000008111156121e657600080fd5b828101905060208101848111156121fc57600080fd5b815185600182028301116401000000008211171561221957600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6e616d6500000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156122c157600080fd5b505af11580156122d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156122ff57600080fd5b81019080805164010000000081111561231757600080fd5b8281019050602081018481111561232d57600080fd5b815185600182028301116401000000008211171561234a57600080fd5b50509291905050508373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f7265736964656e63650000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156123f257600080fd5b505af1158015612406573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561243057600080fd5b81019080805164010000000081111561244857600080fd5b8281019050602081018481111561245e57600080fd5b815185600182028301116401000000008211171561247b57600080fd5b50509291905050506124a3565b91505b600082819150975097505b5050505050509250929050565b60608060608060606124ea6040805190810160405280600281526020017f696400000000000000000000000000000000000000000000000000000000000081525089610bfd565b935061252b6040805190810160405280600481526020017f6e616d650000000000000000000000000000000000000000000000000000000081525088610bfd565b925061256c6040805190810160405280600981526020017f7265736964656e6365000000000000000000000000000000000000000000000081525087610bfd565b91506125788484612594565b90506125848183612594565b9050809450505050509392505050565b6060806060806060600080600089965088955085518751016040519080825280601f01601f1916602001820160405280156125de5781602001602082028038833980820191505090505b50945084935060009250600091505b86518210156126a257868281518110151561260457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002848481518110151561265d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350828060010193505081806001019250506125ed565b600090505b855181101561275c5785818151811015156126be57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002848481518110151561271757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350828060010193505080806001019150506126a7565b83975050505050505050929150505600a165627a7a72305820b8edc1955c390ced55e6d7ea1ccf43fc4c94eb150e3e205efc8d879555b3e8410029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","757365724865616c746848617368000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561202257600080fd5b505af1158015612036573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561206057600080fd5b81019080805164010000000081111561207857600080fd5b8281019050602081018481111561208e57600080fd5b81518560018202830111640100000000821117156120ab57600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f69734865616c7468000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561215357600080fd5b505af1158015612167573d6000803e3d6000fd5b505050506040513d602081101561217d57600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f76616c6964506572696f64000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561222e57600080fd5b505af1158015612242573d6000803e3d6000fd5b505050506040513d602081101561225857600080fd5b81019080805190602001909291905050506110b0565b91505b6122b08a6040805190810160405280600681526020017f745f757365720000000000000000000000000000000000000000000000000000815250610bf8565b15612653576126508173ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260028152602001807f6964000000000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561235857600080fd5b505af115801561236c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561239657600080fd5b8101908080516401000000008111156123ae57600080fd5b828101905060208101848111156123c457600080fd5b81518560018202830111640100000000821117156123e157600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f6e616d6500000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156124c757600080fd5b8101908080516401000000008111156124df57600080fd5b828101905060208101848111156124f557600080fd5b815185600182028301116401000000008211171561251257600080fd5b50509291905050508373ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f7265736964656e63650000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156125ba57600080fd5b505af11580156125ce573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156125f857600080fd5b81019080805164010000000081111561261057600080fd5b8281019050602081018481111561262657600080fd5b815185600182028301116401000000008211171561264357600080fd5b5050929190505050610f24565b91505b600082819150975097505b5050505050509250929050565b60608060608060606126b26040805190810160405280600281526020017f696400000000000000000000000000000000000000000000000000000000000081525089611015565b93506126fb6040805190810160405280600b81526020017f697344616e6765726f75730000000000000000000000000000000000000000008152506126f689610d47565b611015565b92506127446040805190810160405280600481526020017f646174650000000000000000000000000000000000000000000000000000000081525061273f88610d47565b611015565b91506127508484610a20565b905061275c8183610a20565b90508094505050505093925050505600a165627a7a72305820b226dc7cbb10ade125d80b3cef87a46740cd5cc893421b580258d16ae64ed73f0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"int256\"}],\"name\":\"intToString\",\"outputs\":[{\"name\":\"str\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"firstString\",\"type\":\"string\"},{\"name\":\"secondString\",\"type\":\"string\"}],\"name\":\"stringToJson\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"firstString\",\"type\":\"string\"},{\"name\":\"secondString\",\"type\":\"string\"}],\"name\":\"compare\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"isDangerous\",\"type\":\"int256\"},{\"name\":\"date\",\"type\":\"int256\"}],\"name\":\"togovernment\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"int256\"},{\"name\":\"date\",\"type\":\"int256\"}],\"name\":\"toHospital\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userHealthHash\",\"type\":\"string\"},{\"name\":\"isHealth\",\"type\":\"int256\"},{\"name\":\"validPeriod\",\"type\":\"int256\"}],\"name\":\"tohealth\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"table_name\",\"type\":\"string\"},{\"name\":\"primary_key\",\"type\":\"string\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"residence\",\"type\":\"string\"}],\"name\":\"touser\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"firstString\",\"type\":\"string\"},{\"name\":\"secondString\",\"type\":\"string\"}],\"name\":\"concat\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INTTOSTRING = "intToString";

    public static final String FUNC_STRINGTOJSON = "stringToJson";

    public static final String FUNC_COMPARE = "compare";

    public static final String FUNC_TOGOVERNMENT = "togovernment";

    public static final String FUNC_TOHOSPITAL = "toHospital";

    public static final String FUNC_TOHEALTH = "tohealth";

    public static final String FUNC_QUERY = "query";

    public static final String FUNC_TOUSER = "touser";

    public static final String FUNC_CONCAT = "concat";

    protected Util(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String intToString(BigInteger v) throws ContractException {
        final Function function = new Function(FUNC_INTTOSTRING,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(v)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt stringToJson(String firstString, String secondString) {
        final Function function = new Function(
                FUNC_STRINGTOJSON,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void stringToJson(String firstString, String secondString, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STRINGTOJSON,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStringToJson(String firstString, String secondString) {
        final Function function = new Function(
                FUNC_STRINGTOJSON,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getStringToJsonInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STRINGTOJSON,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple1<String> getStringToJsonOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_STRINGTOJSON,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt compare(String firstString, String secondString) {
        final Function function = new Function(
                FUNC_COMPARE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void compare(String firstString, String secondString, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPARE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompare(String firstString, String secondString) {
        final Function function = new Function(
                FUNC_COMPARE,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCompareInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMPARE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple1<Boolean> getCompareOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_COMPARE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
        );
    }

    public TransactionReceipt togovernment(String id, BigInteger isDangerous, BigInteger date) {
        final Function function = new Function(
                FUNC_TOGOVERNMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(isDangerous),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(date)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void togovernment(String id, BigInteger isDangerous, BigInteger date, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TOGOVERNMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(isDangerous),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(date)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTogovernment(String id, BigInteger isDangerous, BigInteger date) {
        final Function function = new Function(
                FUNC_TOGOVERNMENT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(isDangerous),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(date)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getTogovernmentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TOGOVERNMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple1<String> getTogovernmentOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TOGOVERNMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt toHospital(String id, String name, BigInteger result, BigInteger date) {
        final Function function = new Function(
                FUNC_TOHOSPITAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(result),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(date)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void toHospital(String id, String name, BigInteger result, BigInteger date, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TOHOSPITAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(result),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(date)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForToHospital(String id, String name, BigInteger result, BigInteger date) {
        final Function function = new Function(
                FUNC_TOHOSPITAL,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(result),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(date)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, BigInteger> getToHospitalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TOHOSPITAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
        );
    }

    public Tuple1<String> getToHospitalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TOHOSPITAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt tohealth(String userHealthHash, BigInteger isHealth, BigInteger validPeriod) {
        final Function function = new Function(
                FUNC_TOHEALTH,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userHealthHash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(isHealth),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(validPeriod)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void tohealth(String userHealthHash, BigInteger isHealth, BigInteger validPeriod, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TOHEALTH,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userHealthHash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(isHealth),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(validPeriod)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTohealth(String userHealthHash, BigInteger isHealth, BigInteger validPeriod) {
        final Function function = new Function(
                FUNC_TOHEALTH,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userHealthHash),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(isHealth),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(validPeriod)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getTohealthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TOHEALTH,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple1<String> getTohealthOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TOHEALTH,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt query(String table_name, String primary_key) {
        final Function function = new Function(
                FUNC_QUERY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(table_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(primary_key)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void query(String table_name, String primary_key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(table_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(primary_key)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQuery(String table_name, String primary_key) {
        final Function function = new Function(
                FUNC_QUERY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(table_name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(primary_key)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getQueryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple2<BigInteger, String> getQueryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public TransactionReceipt touser(String id, String name, String residence) {
        final Function function = new Function(
                FUNC_TOUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(residence)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void touser(String id, String name, String residence, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TOUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(residence)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTouser(String id, String name, String residence) {
        final Function function = new Function(
                FUNC_TOUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(residence)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getTouserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TOUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
        );
    }

    public Tuple1<String> getTouserOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TOUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public TransactionReceipt concat(String firstString, String secondString) {
        final Function function = new Function(
                FUNC_CONCAT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void concat(String firstString, String secondString, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CONCAT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForConcat(String firstString, String secondString) {
        final Function function = new Function(
                FUNC_CONCAT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(firstString),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(secondString)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getConcatInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CONCAT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public Tuple1<String> getConcatOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CONCAT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public static Util load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Util(contractAddress, client, credential);
    }

    public static Util deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Util.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}