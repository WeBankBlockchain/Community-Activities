package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class OwnContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","","5b9050919050565b60006040820190508181036000830152611dec81611ae4565b90508181036020830152611e00818461192e565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611e2b57600080fd5b8060405250919050565b600067ffffffffffffffff821115611e4c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000611f0282611ec1565b9050919050565b6000611f1482611ec1565b9050919050565b6000611f2682611ec1565b9050919050565b6000611f3882611ec1565b9050919050565b6000819050919050565b6000611f5482611ec1565b9050919050565b6000611f6682611ec1565b9050919050565b82818337600083830152505050565b60005b83811015611f9a578082015181840152602081019050611f7f565b83811115611fa9576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058206a6a2bd985d5b29942ffd92a02dbb40ede7e41d0daaf74f79e87dc66b8b62abb6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b506200002b62000031640100000000026401000000009004565b62000224565b600061100190508073ffffffffffffffffffffffffffffffffffffffff1663c92a78016040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200008d90620001ce565b602060405180830381600087803b158015620000a857600080fd5b505af1158015620000bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620000e39190810190620000fd565b5050565b6000620000f582516200021a565b905092915050565b6000602082840312156200011057600080fd5b60006200012084828501620000e7565b91505092915050565b6000600582527f745f6f776e0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601f82527f7573657269642c6365727469642c636f6e74656e742c74696d657374616d70006020830152604082019050919050565b6000600882527f6964656e746974790000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152620001e98162000129565b90508181036020830152620001fe8162000197565b90508181036040830152620002138162000160565b9050919050565b6000819050919050565b611ffb80620002346000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304e56a29146100675780631eca7b35146100a75780632e66911a146100e457806348da841d14610121575b600080fd5b34801561007357600080fd5b5061008e60048036036100899190810190611691565b610138565b60405161009e9493929190611b1c565b60405180910390f35b3480156100b357600080fd5b506100ce60048036036100c99190810190611713565b610af1565b6040516100db9190611b7d565b60405180910390f35b3480156100f057600080fd5b5061010b6004803603610106919081019061177f565b610e11565b6040516101189190611b98565b60405180910390f35b34801561012d57600080fd5b50610136611290565b005b60608060608060008060006060806060806000806101546113e7565b98508873ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156101ba57600080fd5b505af11580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101f291908101906115c4565b97508773ffffffffffffffffffffffffffffffffffffffff1663ae763db58f6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102499190611d7f565b600060405180830381600087803b15801561026357600080fd5b505af1158015610277573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff1663d8ac5957896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102d09190611cb5565b602060405180830381600087803b1580156102ea57600080fd5b505af11580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061032291908101906115ed565b96508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561038857600080fd5b505af115801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103c09190810190611668565b6040519080825280602002602001820160405280156103f357816020015b60608152602001906001900390816103de5790505b5095508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561045a57600080fd5b505af115801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104929190810190611668565b6040519080825280602002602001820160405280156104c557816020015b60608152602001906001900390816104b05790505b5094508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105649190810190611668565b60405190808252806020026020018201604052801561059757816020015b60608152602001906001900390816105825790505b5093508673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156105fe57600080fd5b505af1158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106369190810190611668565b6040519080825280602002602001820160405280156106645781602001602082028038833980820191505090505b509250600091505b8673ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106d057600080fd5b505af11580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107089190810190611668565b821215610ad5578673ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107649190611b98565b602060405180830381600087803b15801561077e57600080fd5b505af1158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107b69190810190611616565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161080b90611d5f565b600060405180830381600087803b15801561082557600080fd5b505af1158015610839573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061086291908101906116d2565b868381518110151561087057fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108d090611db4565b600060405180830381600087803b1580156108ea57600080fd5b505af11580156108fe573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061092791908101906116d2565b858381518110151561093557fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161099590611c2d565b600060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506109ec91908101906116d2565b84838151811015156109fa57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a5a90611d11565b602060405180830381600087803b158015610a7457600080fd5b505af1158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aac9190810190611668565b8383815181101515610aba57fe5b9060200190602002018181525050818060010192505061066c565b858585859c509c509c509c505050505050505050509193509193565b600080600080610aff6113e7565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b6557600080fd5b505af1158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b9d91908101906115c4565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bf49190611d7f565b600060405180830381600087803b158015610c0e57600080fd5b505af1158015610c22573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c7b9190611dd4565b600060405180830381600087803b158015610c9557600080fd5b505af1158015610ca9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663d8ac5957836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d029190611cb5565b602060405180830381600087803b158015610d1c57600080fd5b505af1158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d5491908101906115ed565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dbc57600080fd5b505af1158015610dd0573d6000803e","","565b9050919050565b60006040820190508181036000830152611ded81611ae5565b90508181036020830152611e01818461192f565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611e2c57600080fd5b8060405250919050565b600067ffffffffffffffff821115611e4d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000611f0382611ec2565b9050919050565b6000611f1582611ec2565b9050919050565b6000611f2782611ec2565b9050919050565b6000611f3982611ec2565b9050919050565b6000819050919050565b6000611f5582611ec2565b9050919050565b6000611f6782611ec2565b9050919050565b82818337600083830152505050565b60005b83811015611f9b578082015181840152602081019050611f80565b83811115611faa576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201717f079841dcb33fddce33fdbef68c6afbd0b0aaf6fd3c4d927c33fdde91cdb6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"userid\",\"type\":\"string\"},{\"name\":\"certid\",\"type\":\"string\"}],\"name\":\"getOwnByUserIdAndCertId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleteAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userid\",\"type\":\"string\"},{\"name\":\"certid\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"int256\"}],\"name\":\"newOwn\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userid\",\"type\":\"string\"}],\"name\":\"getOwn\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"certid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"int256\"}],\"name\":\"NewOwn\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETOWNBYUSERIDANDCERTID = "getOwnByUserIdAndCertId";

    public static final String FUNC_DELETEALL = "deleteAll";

    public static final String FUNC_NEWOWN = "newOwn";

    public static final String FUNC_GETOWN = "getOwn";

    public static final Event NEWOWN_EVENT = new Event("NewOwn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    protected OwnContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt getOwnByUserIdAndCertId(String userid, String certid) {
        final Function function = new Function(
                FUNC_GETOWNBYUSERIDANDCERTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(certid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getOwnByUserIdAndCertId(String userid, String certid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETOWNBYUSERIDANDCERTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(certid)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetOwnByUserIdAndCertId(String userid, String certid) {
        final Function function = new Function(
                FUNC_GETOWNBYUSERIDANDCERTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(certid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getGetOwnByUserIdAndCertIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETOWNBYUSERIDANDCERTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getGetOwnByUserIdAndCertIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETOWNBYUSERIDANDCERTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteAll() {
        final Function function = new Function(
                FUNC_DELETEALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteAll(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteAll() {
        final Function function = new Function(
                FUNC_DELETEALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt newOwn(String userid, String certid, String content, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_NEWOWN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(certid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void newOwn(String userid, String certid, String content, BigInteger timestamp, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWOWN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(certid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewOwn(String userid, String certid, String content, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_NEWOWN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(certid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getNewOwnInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWOWN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getNewOwnOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NEWOWN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple4<List<String>, List<String>, List<String>, List<BigInteger>> getOwn(String userid) throws ContractException {
        final Function function = new Function(FUNC_GETOWN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Int256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<List<String>, List<String>, List<String>, List<BigInteger>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Int256>) results.get(3).getValue()));
    }

    public List<NewOwnEventResponse> getNewOwnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWOWN_EVENT, transactionReceipt);
        ArrayList<NewOwnEventResponse> responses = new ArrayList<NewOwnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewOwnEventResponse typedResponse = new NewOwnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.certid = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.content = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNewOwnEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWOWN_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNewOwnEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NEWOWN_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static OwnContract load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new OwnContract(contractAddress, client, credential);
    }

    public static OwnContract deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(OwnContract.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class NewOwnEventResponse {
        public TransactionReceipt.Logs log;

        public String userid;

        public String certid;

        public String content;

        public BigInteger timestamp;
    }
}
