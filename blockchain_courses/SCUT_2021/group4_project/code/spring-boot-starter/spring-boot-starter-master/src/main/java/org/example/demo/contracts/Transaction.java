package org.example.demo.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Transaction extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50611d49806100626000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ae80dd5146100d557806334a18dda14610102578063647574a71461017557806379fa913f1461018c57806383d93a1c146101f5578063bca926af14610268578063c5c8cfbf1461027f578063c86e992a146102eb578063ca267f2814610373578063d39f70bc1461039e578063e75b8b23146103b5578063e76637ce14610542578063f4437d85146105ae578063fe9e0f6214610611575b600080fd5b3480156100e157600080fd5b5061010060048036038101908080359060200190929190505050610684565b005b34801561010e57600080fd5b50610173600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610984565b005b34801561018157600080fd5b5061018a610af5565b005b34801561019857600080fd5b506101f3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b38565b005b34801561020157600080fd5b5061026660048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ca0565b005b34801561027457600080fd5b5061027d610d12565b005b34801561028b57600080fd5b50610294610dbb565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102d75780820151818401526020810190506102bc565b505050509050019250505060405180910390f35b610371600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050610e70565b005b34801561037f57600080fd5b506103886111ec565b6040518082815260200191505060405180910390f35b3480156103aa57600080fd5b506103b36111f9565b005b3480156103c157600080fd5b506103e06004803603810190808035906020019092919050505061129e565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561049a57808201518184015260208101905061047f565b50505050905090810190601f1680156104c75780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156105005780820151818401526020810190506104e5565b50505050905090810190601f16801561052d5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561054e57600080fd5b5061055761151f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561059a57808201518184015260208101905061057f565b505050509050019250505060405180910390f35b3480156105ba57600080fd5b5061060f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611738565b005b34801561061d57600080fd5b5061068260048036038101908080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506117be565b005b60008060008060038581548110151561069957fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693506003858154811015156106dc57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060038581548110151561071f57fe5b906000526020600020906007020160030154915060038581548110151561074257fe5b9060005260206000209060070201600201549050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330e0789e8486856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389b3887e82856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561092c57600080fd5b505af1158015610940573d6000803e3d6000fd5b50505050601560038681548110151561095557fe5b906000526020600020906007020160040181905550600560008154809291906001900391905055505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630553904e3084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610a67578082015181840152602081019050610a4c565b50505050905090810190601f168015610a945780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b8101908080519060200190929190505050505050565b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311e3f2af30836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c14578082015181840152602081019050610bf9565b50505050905090810190601f168015610c415780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610c6157600080fd5b505af1158015610c75573d6000803e3d6000fd5b505050506040513d6020811015610c8b57600080fd5b81019080805190602001909291905050505050565b80600383815481101515610cb057fe5b90600052602060002090600702016006019080519060200190610cd4929190611bf8565b506014600383815481101515610ce657fe5b906000526020600020906007020160040181905550600560008154809291906001900391905055505050565b610d79606060405190810160405280602181526020017f726571756573744172626974726174696f6e2875696e743235362c7374696e6781526020017f29000000000000000000000000000000000000000000000000000000000000008152506001610984565b610db96040805190810160405280601f81526020017f64656e794172626974726172696f6e2875696e743235362c737472696e6729008152506001610984565b565b606080600080600554604051908082528060200260200182016040528015610df25781602001602082028038833980820191505090505b50925060009150600090505b600380549050811015610e67576000600382815481101515610e1c57fe5b9060005260206000209060070201600401541115610e5a57808383815181101515610e4357fe5b906020019060200201818152505081806001019250505b8080600101915050610dfe565b82935050505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330e0789e8787876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1681526020019350505050600060405180830381600087803b158015610f6f57600080fd5b505af1158015610f83573d6000803e3d6000fd5b50505050600360e0604051908101604052808873ffffffffffff","ffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018663ffffffff1681526020016000815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200160206040519081016040528060008152508152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005019080519060200190611125929190611c78565b5060c0820151816006019080519060200190611142929190611c78565b50505050600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550505050505050565b6000600380549050905090565b61125e606060405190810160405280602281526020017f726571756573744172626974726174696f6e2875696e743235362c737472696e81526020017f6729000000000000000000000000000000000000000000000000000000000000815250610b38565b61129c6040805190810160405280601f81526020017f64656e794172626974726172696f6e2875696e743235362c737472696e672900815250610b38565b565b60008060008060006060806003888154811015156112b857fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003898154811015156112f957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038a81548110151561133a57fe5b90600052602060002090600702016002015460038b81548110151561135b57fe5b90600052602060002090600702016003015460038c81548110151561137c57fe5b90600052602060002090600702016004015460038d81548110151561139d57fe5b906000526020600020906007020160050160038e8154811015156113bd57fe5b9060005260206000209060070201600601818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114635780601f1061143857610100808354040283529160200191611463565b820191906000526020600020905b81548152906001019060200180831161144657829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ff5780601f106114d4576101008083540402835291602001916114ff565b820191906000526020600020905b8154815290600101906020018083116114e257829003601f168201915b505050505090509650965096509650965096509650919395979092949650565b60608060008060046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040519080825280602002602001820160405280156115b55781602001602082028038833980820191505090505b50925060009150600090505b60038054905081101561172f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660038281548110151561161657fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806116f75750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166003828154811015156116ad57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156117225780838381518110151561170b57fe5b906020019060200201818152505081806001019250505b80806001019150506115c1565b82935050505090565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6003828154811015156117cd57fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f6f6e6c792062757965722063616e20726571756573742041726269747261746981526020017f6f6e21000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6003828154811015156118d657fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cde532673360038681548110151561196c57fe5b9060005260206000209060070201600201546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611a0357600080fd5b505af1158015611a17573d6000803e3d6000fd5b505050506040513d6020811015611a2d57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515611ac9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6e667420646f6573206e6f742062656c6f6e6720746f20796f7521000000000081525060200191505060405180910390fd5b6000600383815481101515611ada57fe5b906000526020600020906007020160040154141515611b87576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f6265696e672061726269747261746564206f72206172626974726174696f6e2081526020017f68617665206265656e2070726f6365737365640000000000000000000000000081525060400191505060405180910390fd5b80600383815481101515611b9757fe5b90600052602060002090600702016006019080519060200190611bbb929190611bf8565b506001600383815481101515611bcd57fe5b9060005260206000209060070201600401819055506005600081548092919060010191905055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c3957805160ff1916838001178555611c67565b82800160010185558215611c67579182015b82811115611c66578251825591602001919060010190611c4b565b5b509050611c749190611cf8565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cb957805160ff1916838001178555611ce7565b82800160010185558215611ce7579182015b82811115611ce6578251825591602001919060010190611ccb565b5b509050611cf49190611cf8565b5090565b611d1a91905b80821115611d16576000816000905550600101611cfe565b5090565b905600a165627a7a72305820943407b14071592c7c9190823092c0683eb0a9309a92938d8624485a61f1d2180029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50611d49806100626000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ae80dd5146100d557806334a18dda14610102578063647574a71461017557806379fa913f1461018c57806383d93a1c146101f5578063bca926af14610268578063c5c8cfbf1461027f578063c86e992a146102eb578063ca267f2814610373578063d39f70bc1461039e578063e75b8b23146103b5578063e76637ce14610542578063f4437d85146105ae578063fe9e0f6214610611575b600080fd5b3480156100e157600080fd5b5061010060048036038101908080359060200190929190505050610684565b005b34801561010e57600080fd5b50610173600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610984565b005b34801561018157600080fd5b5061018a610af5565b005b34801561019857600080fd5b506101f3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610b38565b005b34801561020157600080fd5b5061026660048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ca0565b005b34801561027457600080fd5b5061027d610d12565b005b34801561028b57600080fd5b50610294610dbb565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102d75780820151818401526020810190506102bc565b505050509050019250505060405180910390f35b610371600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050610e70565b005b34801561037f57600080fd5b506103886111ec565b6040518082815260200191505060405180910390f35b3480156103aa57600080fd5b506103b36111f9565b005b3480156103c157600080fd5b506103e06004803603810190808035906020019092919050505061129e565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561049a57808201518184015260208101905061047f565b50505050905090810190601f1680156104c75780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156105005780820151818401526020810190506104e5565b50505050905090810190601f16801561052d5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561054e57600080fd5b5061055761151f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561059a57808201518184015260208101905061057f565b505050509050019250505060405180910390f35b3480156105ba57600080fd5b5061060f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611738565b005b34801561061d57600080fd5b5061068260048036038101908080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506117be565b005b60008060008060038581548110151561069957fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693506003858154811015156106dc57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060038581548110151561071f57fe5b906000526020600020906007020160030154915060038581548110151561074257fe5b9060005260206000209060070201600201549050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330e0789e8486856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389b3887e82856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561092c57600080fd5b505af1158015610940573d6000803e3d6000fd5b50505050601560038681548110151561095557fe5b906000526020600020906007020160040181905550600560008154809291906001900391905055505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630553904e3084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610a67578082015181840152602081019050610a4c565b50505050905090810190601f168015610a945780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b8101908080519060200190929190505050505050565b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311e3f2af30836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c14578082015181840152602081019050610bf9565b50505050905090810190601f168015610c415780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610c6157600080fd5b505af1158015610c75573d6000803e3d6000fd5b505050506040513d6020811015610c8b57600080fd5b81019080805190602001909291905050505050565b80600383815481101515610cb057fe5b90600052602060002090600702016006019080519060200190610cd4929190611bf8565b506014600383815481101515610ce657fe5b906000526020600020906007020160040181905550600560008154809291906001900391905055505050565b610d79606060405190810160405280602181526020017f726571756573744172626974726174696f6e2875696e743235362c7374696e6781526020017f29000000000000000000000000000000000000000000000000000000000000008152506001610984565b610db96040805190810160405280601f81526020017f64656e794172626974726172696f6e2875696e743235362c737472696e6729008152506001610984565b565b606080600080600554604051908082528060200260200182016040528015610df25781602001602082028038833980820191505090505b50925060009150600090505b600380549050811015610e67576000600382815481101515610e1c57fe5b9060005260206000209060070201600401541115610e5a57808383815181101515610e4357fe5b906020019060200201818152505081806001019250505b8080600101915050610dfe565b82935050505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330e0789e8787876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1681526020019350505050600060405180830381600087803b158015610f6f57600080fd5b505af1158015610f83573d6000803e3d6000fd5b50505050600360e0604051908101604052808873ffffffffffff","ffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018663ffffffff1681526020016000815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050815260200160206040519081016040528060008152508152509080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005019080519060200190611125929190611c78565b5060c0820151816006019080519060200190611142929190611c78565b50505050600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550505050505050565b6000600380549050905090565b61125e606060405190810160405280602281526020017f726571756573744172626974726174696f6e2875696e743235362c737472696e81526020017f6729000000000000000000000000000000000000000000000000000000000000815250610b38565b61129c6040805190810160405280601f81526020017f64656e794172626974726172696f6e2875696e743235362c737472696e672900815250610b38565b565b60008060008060006060806003888154811015156112b857fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003898154811015156112f957fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038a81548110151561133a57fe5b90600052602060002090600702016002015460038b81548110151561135b57fe5b90600052602060002090600702016003015460038c81548110151561137c57fe5b90600052602060002090600702016004015460038d81548110151561139d57fe5b906000526020600020906007020160050160038e8154811015156113bd57fe5b9060005260206000209060070201600601818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114635780601f1061143857610100808354040283529160200191611463565b820191906000526020600020905b81548152906001019060200180831161144657829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ff5780601f106114d4576101008083540402835291602001916114ff565b820191906000526020600020905b8154815290600101906020018083116114e257829003601f168201915b505050505090509650965096509650965096509650919395979092949650565b60608060008060046000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040519080825280602002602001820160405280156115b55781602001602082028038833980820191505090505b50925060009150600090505b60038054905081101561172f57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660038281548110151561161657fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806116f75750600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166003828154811015156116ad57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156117225780838381518110151561170b57fe5b906020019060200201818152505081806001019250505b80806001019150506115c1565b82935050505090565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6003828154811015156117cd57fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f6f6e6c792062757965722063616e20726571756573742041726269747261746981526020017f6f6e21000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6003828154811015156118d657fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cde532673360038681548110151561196c57fe5b9060005260206000209060070201600201546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611a0357600080fd5b505af1158015611a17573d6000803e3d6000fd5b505050506040513d6020811015611a2d57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16141515611ac9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6e667420646f6573206e6f742062656c6f6e6720746f20796f7521000000000081525060200191505060405180910390fd5b6000600383815481101515611ada57fe5b906000526020600020906007020160040154141515611b87576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f6265696e672061726269747261746564206f72206172626974726174696f6e2081526020017f68617665206265656e2070726f6365737365640000000000000000000000000081525060400191505060405180910390fd5b80600383815481101515611b9757fe5b90600052602060002090600702016006019080519060200190611bbb929190611bf8565b506001600383815481101515611bcd57fe5b9060005260206000209060070201600401819055506005600081548092919060010191905055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c3957805160ff1916838001178555611c67565b82800160010185558215611c67579182015b82811115611c66578251825591602001919060010190611c4b565b5b509050611c749190611cf8565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cb957805160ff1916838001178555611ce7565b82800160010185558215611ce7579182015b82811115611ce6578251825591602001919060010190611ccb565b5b509050611cf49190611cf8565b5090565b611d1a91905b80821115611d16576000816000905550600101611cfe565b5090565b905600a165627a7a72305820943407b14071592c7c9190823092c0683eb0a9309a92938d8624485a61f1d2180029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"name\":\"approveArbitration\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"approveArbitration(uint256)\"},{\"name\":\"registerParallelFunction\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"registerParallelFunction(string,uint256)\"},{\"name\":\"setsender\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"setsender()\"},{\"name\":\"unregisterParallelFunction\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"unregisterParallelFunction(string)\"},{\"name\":\"denyArbitration\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"denyArbitration(uint256,string)\"},{\"name\":\"enableParallel\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"enableParallel()\"},{\"name\":\"getAllArbitrations\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"getAllArbitrations()\"},{\"name\":\"makePurchase\",\"type\":\"function\",\"constant\":false,\"payable\":true,\"anonymous\":false,\"stateMutability\":\"payable\",\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"_price\",\"type\":\"uint32\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint32\"},{\"name\":\"_ntfId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_time\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"makePurchase(address,address,uint32,uint256,string)\"},{\"name\":\"getRecordCount\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"getRecordCount()\"},{\"name\":\"disableParallel\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"disableParallel()\"},{\"name\":\"getRecordById\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"ntfId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"reason\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"methodSignatureAsString\":\"getRecordById(uint256)\"},{\"name\":\"getMyRecords\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"getMyRecords()\"},{\"name\":\"setNtfAndAccntContAddr\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_nftContract\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"_accountContract\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[],\"methodSignatureAsString\":\"setNtfAndAccntContAddr(address,address)\"},{\"name\":\"requestArbitration\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_recordId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"requestArbitration(uint256,string)\"},{\"name\":null,\"type\":\"constructor\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":null,\"methodSignatureAsString\":\"null()\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_APPROVEARBITRATION = "approveArbitration";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_SETSENDER = "setsender";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_DENYARBITRATION = "denyArbitration";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_GETALLARBITRATIONS = "getAllArbitrations";

    public static final String FUNC_MAKEPURCHASE = "makePurchase";

    public static final String FUNC_GETRECORDCOUNT = "getRecordCount";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_GETRECORDBYID = "getRecordById";

    public static final String FUNC_GETMYRECORDS = "getMyRecords";

    public static final String FUNC_SETNTFANDACCNTCONTADDR = "setNtfAndAccntContAddr";

    public static final String FUNC_REQUESTARBITRATION = "requestArbitration";

    protected Transaction(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt approveArbitration(BigInteger _recordId) {
        final Function function = new Function(
                FUNC_APPROVEARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void approveArbitration(BigInteger _recordId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVEARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApproveArbitration(BigInteger _recordId) {
        final Function function = new Function(
                FUNC_APPROVEARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getApproveArbitrationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVEARBITRATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt registerParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerParallelFunction(String functionName, BigInteger criticalSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setsender() {
        final Function function = new Function(
                FUNC_SETSENDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setsender(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSENDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetsender() {
        final Function function = new Function(
                FUNC_SETSENDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt unregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt denyArbitration(BigInteger _recordId, String _reason) {
        final Function function = new Function(
                FUNC_DENYARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId),
                new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void denyArbitration(BigInteger _recordId, String _reason, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DENYARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId),
                new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDenyArbitration(BigInteger _recordId, String _reason) {
        final Function function = new Function(
                FUNC_DENYARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId),
                new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getDenyArbitrationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DENYARBITRATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt enableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void enableParallel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List getAllArbitrations() throws ContractException {
        final Function function = new Function(FUNC_GETALLARBITRATIONS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt makePurchase(String _buyer, String _seller, BigInteger _price, BigInteger _ntfId, String _time) {
        final Function function = new Function(
                FUNC_MAKEPURCHASE,
                Arrays.<Type>asList(new Address(_buyer),
                new Address(_seller),
                new Uint32(_price),
                new Uint256(_ntfId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void makePurchase(String _buyer, String _seller, BigInteger _price, BigInteger _ntfId, String _time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MAKEPURCHASE,
                Arrays.<Type>asList(new Address(_buyer),
                new Address(_seller),
                new Uint32(_price),
                new Uint256(_ntfId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMakePurchase(String _buyer, String _seller, BigInteger _price, BigInteger _ntfId, String _time) {
        final Function function = new Function(
                FUNC_MAKEPURCHASE,
                Arrays.<Type>asList(new Address(_buyer),
                new Address(_seller),
                new Uint32(_price),
                new Uint256(_ntfId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getMakePurchaseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MAKEPURCHASE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue()
                );
    }

    public BigInteger getRecordCount() throws ContractException {
        final Function function = new Function(FUNC_GETRECORDCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt disableParallel() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void disableParallel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDisableParallel() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<String, String, BigInteger, BigInteger, BigInteger, String, String> getRecordById(BigInteger _recordId) throws ContractException {
        final Function function = new Function(FUNC_GETRECORDBYID,
                Arrays.<Type>asList(new Uint256(_recordId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<String, String, BigInteger, BigInteger, BigInteger, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (String) results.get(6).getValue());
    }

    public List getMyRecords() throws ContractException {
        final Function function = new Function(FUNC_GETMYRECORDS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setNtfAndAccntContAddr(String _nftContract, String _accountContract) {
        final Function function = new Function(
                FUNC_SETNTFANDACCNTCONTADDR,
                Arrays.<Type>asList(new Address(_nftContract),
                new Address(_accountContract)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setNtfAndAccntContAddr(String _nftContract, String _accountContract, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETNTFANDACCNTCONTADDR,
                Arrays.<Type>asList(new Address(_nftContract),
                new Address(_accountContract)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetNtfAndAccntContAddr(String _nftContract, String _accountContract) {
        final Function function = new Function(
                FUNC_SETNTFANDACCNTCONTADDR,
                Arrays.<Type>asList(new Address(_nftContract),
                new Address(_accountContract)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetNtfAndAccntContAddrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETNTFANDACCNTCONTADDR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt requestArbitration(BigInteger _recordId, String _reason) {
        final Function function = new Function(
                FUNC_REQUESTARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId),
                new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void requestArbitration(BigInteger _recordId, String _reason, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REQUESTARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId),
                new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRequestArbitration(BigInteger _recordId, String _reason) {
        final Function function = new Function(
                FUNC_REQUESTARBITRATION,
                Arrays.<Type>asList(new Uint256(_recordId),
                new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getRequestArbitrationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REQUESTARBITRATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public static Transaction load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Transaction(contractAddress, client, credential);
    }

    public static Transaction deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Transaction.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
