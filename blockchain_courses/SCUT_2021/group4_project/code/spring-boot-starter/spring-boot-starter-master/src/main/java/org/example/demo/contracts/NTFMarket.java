package org.example.demo.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint16;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NTFMarket extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50612090806100626000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631a0ad5ad146101175780631ae796e7146101425780631bf31e701461024557806334a18dda146102b157806338cc4831146103245780634118ad8c1461037b5780635271f44d146103e757806358c395a314610412578063647574a71461045557806379fa913f1461046c57806389b3887e146104d557806397fd3a6414610522578063b0f42ec41461054f578063bca926af14610618578063c6daea0d1461062f578063c896e33014610741578063cde5326714610798578063cec4472014610825578063d39f70bc146108ec578063ff23aaa414610903575b600080fd5b34801561012357600080fd5b5061012c610969565b6040518082815260200191505060405180910390f35b34801561014e57600080fd5b50610243600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506109d4565b005b34801561025157600080fd5b5061025a610b6f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561029d578082015181840152602081019050610282565b505050509050019250505060405180910390f35b3480156102bd57600080fd5b50610322600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610c33565b005b34801561033057600080fd5b50610339610da4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038757600080fd5b50610390610dce565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103d35780820151818401526020810190506103b8565b505050509050019250505060405180910390f35b3480156103f357600080fd5b506103fc610f0b565b6040518082815260200191505060405180910390f35b34801561041e57600080fd5b50610453600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbb565b005b34801561046157600080fd5b5061046a610fff565b005b34801561047857600080fd5b506104d3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611042565b005b3480156104e157600080fd5b5061052060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111aa565b005b34801561052e57600080fd5b5061054d60048036038101908080359060200190929190505050611200565b005b34801561055b57600080fd5b5061061660048036038101908080359060200190929190803563ffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506113b4565b005b34801561062457600080fd5b5061062d611605565b005b34801561063b57600080fd5b5061065a60048036038101908080359060200190929190505050611715565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561069e578082015181840152602081019050610683565b50505050905090810190601f1680156106cb5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156107045780820151818401526020810190506106e9565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561074d57600080fd5b50610782600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611899565b6040518082815260200191505060405180910390f35b3480156107a457600080fd5b506107e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061193a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561083157600080fd5b5061085060048036038101908080359060200190929190505050611a3d565b60405180851515151581526020018461ffff1661ffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108ae578082015181840152602081019050610893565b50505050905090810190601f1680156108db5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156108f857600080fd5b50610901611ba6565b005b61096760048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611cb0565b005b6000806000809150600090505b6001805490508110156109cc5760018181548110151561099257fe5b906000526020600020906004020160000160009054906101000a900460ff16156109bf5781806001019250505b8080600101915050610976565b819250505090565b600060018060c0604051908101604052806000151581526020018761ffff168152602001600063ffffffff16815260200188815260200185815260200160206040519081016040528060008152508152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548161ffff021916908361ffff16021790555060408201518160000160036101000a81548163ffffffff021916908363ffffffff1602179055506060820151816001019080519060200190610ad6929190611f3f565b506080820151816002019080519060200190610af3929190611f3f565b5060a0820151816003019080519060200190610b10929190611f3f565b505050039050336003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b606080600080610b7d610969565b604051908082528060200260200182016040528015610bab5781602001602082028038833980820191505090505b50925060009150600090505b600180549050811015610c2a57600181815481101515610bd357fe5b906000526020600020906004020160000160009054906101000a900460ff1615610c1d57808383815181101515610c0657fe5b906020019060200201818152505081806001019250505b8080600101915050610bb7565b82935050505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630553904e3084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610d16578082015181840152602081019050610cfb565b50505050905090810190601f168015610d435780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610d6457600080fd5b505af1158015610d78573d6000803e3d6000fd5b505050506040513d6020811015610d8e57600080fd5b8101908080519060200190929190505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606080600080610dff600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611899565b604051908082528060200260200182016040528015610e2d5781602001602082028038833980820191505090505b50925060009150600090505b600180549050811015610f0257600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ef557808383815181101515610ede57fe5b906020019060200201818152505081806001019250505b8080600101915050610e39565b82935050505090565b60003373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f726571756972652061646d696e207065726d697373696f6e00000000000000","","5591602001919060010190611f92565b5b509050611fbb919061203f565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061200057805160ff191683800117855561202e565b8280016001018555821561202e579182015b8281111561202d578251825591602001919060010190612012565b5b50905061203b919061203f565b5090565b61206191905b8082111561205d576000816000905550600101612045565b5090565b905600a165627a7a72305820ae0d631ef709abcd6d854473c3a8c61a772e370436c4b40ea7bd5a3f2c2bb8b20029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50612090806100626000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631a0ad5ad146101175780631ae796e7146101425780631bf31e701461024557806334a18dda146102b157806338cc4831146103245780634118ad8c1461037b5780635271f44d146103e757806358c395a314610412578063647574a71461045557806379fa913f1461046c57806389b3887e146104d557806397fd3a6414610522578063b0f42ec41461054f578063bca926af14610618578063c6daea0d1461062f578063c896e33014610741578063cde5326714610798578063cec4472014610825578063d39f70bc146108ec578063ff23aaa414610903575b600080fd5b34801561012357600080fd5b5061012c610969565b6040518082815260200191505060405180910390f35b34801561014e57600080fd5b50610243600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803561ffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506109d4565b005b34801561025157600080fd5b5061025a610b6f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561029d578082015181840152602081019050610282565b505050509050019250505060405180910390f35b3480156102bd57600080fd5b50610322600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610c33565b005b34801561033057600080fd5b50610339610da4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038757600080fd5b50610390610dce565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103d35780820151818401526020810190506103b8565b505050509050019250505060405180910390f35b3480156103f357600080fd5b506103fc610f0b565b6040518082815260200191505060405180910390f35b34801561041e57600080fd5b50610453600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbb565b005b34801561046157600080fd5b5061046a610fff565b005b34801561047857600080fd5b506104d3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611042565b005b3480156104e157600080fd5b5061052060048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111aa565b005b34801561052e57600080fd5b5061054d60048036038101908080359060200190929190505050611200565b005b34801561055b57600080fd5b5061061660048036038101908080359060200190929190803563ffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506113b4565b005b34801561062457600080fd5b5061062d611605565b005b34801561063b57600080fd5b5061065a60048036038101908080359060200190929190505050611715565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561069e578082015181840152602081019050610683565b50505050905090810190601f1680156106cb5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156107045780820151818401526020810190506106e9565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561074d57600080fd5b50610782600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611899565b6040518082815260200191505060405180910390f35b3480156107a457600080fd5b506107e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061193a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561083157600080fd5b5061085060048036038101908080359060200190929190505050611a3d565b60405180851515151581526020018461ffff1661ffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108ae578082015181840152602081019050610893565b50505050905090810190601f1680156108db5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156108f857600080fd5b50610901611ba6565b005b61096760048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611cb0565b005b6000806000809150600090505b6001805490508110156109cc5760018181548110151561099257fe5b906000526020600020906004020160000160009054906101000a900460ff16156109bf5781806001019250505b8080600101915050610976565b819250505090565b600060018060c0604051908101604052806000151581526020018761ffff168152602001600063ffffffff16815260200188815260200185815260200160206040519081016040528060008152508152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548161ffff021916908361ffff16021790555060408201518160000160036101000a81548163ffffffff021916908363ffffffff1602179055506060820151816001019080519060200190610ad6929190611f3f565b506080820151816002019080519060200190610af3929190611f3f565b5060a0820151816003019080519060200190610b10929190611f3f565b505050039050336003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b606080600080610b7d610969565b604051908082528060200260200182016040528015610bab5781602001602082028038833980820191505090505b50925060009150600090505b600180549050811015610c2a57600181815481101515610bd357fe5b906000526020600020906004020160000160009054906101000a900460ff1615610c1d57808383815181101515610c0657fe5b906020019060200201818152505081806001019250505b8080600101915050610bb7565b82935050505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630553904e3084846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610d16578082015181840152602081019050610cfb565b50505050905090810190601f168015610d435780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610d6457600080fd5b505af1158015610d78573d6000803e3d6000fd5b505050506040513d6020811015610d8e57600080fd5b8101908080519060200190929190505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606080600080610dff600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611899565b604051908082528060200260200182016040528015610e2d5781602001602082028038833980820191505090505b50925060009150600090505b600180549050811015610f0257600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ef557808383815181101515610ede57fe5b906020019060200201818152505081806001019250505b8080600101915050610e39565b82935050505090565b60003373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f726571756972652061646d696e207065726d697373696f6e00000000000000","","5591602001919060010190611f92565b5b509050611fbb919061203f565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061200057805160ff191683800117855561202e565b8280016001018555821561202e579182015b8281111561202d578251825591602001919060010190612012565b5b50905061203b919061203f565b5090565b61206191905b8082111561205d576000816000905550600101612045565b5090565b905600a165627a7a72305820ae0d631ef709abcd6d854473c3a8c61a772e370436c4b40ea7bd5a3f2c2bb8b20029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"name\":\"sellingNtfCount\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"sellingNtfCount()\"},{\"name\":\"newNtf\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"_species\",\"type\":\"uint16\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint16\"},{\"name\":\"_disc\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"_picUrl\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"newNtf(string,uint16,string,string)\"},{\"name\":\"getNtfsForSale\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"getNtfsForSale()\"},{\"name\":\"registerParallelFunction\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"registerParallelFunction(string,uint256)\"},{\"name\":\"getAddress\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"methodSignatureAsString\":\"getAddress()\"},{\"name\":\"getMyNtfs\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"getMyNtfs()\"},{\"name\":\"ntfCount\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"ntfCount()\"},{\"name\":\"setTranContAddr\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_transactionContract\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[],\"methodSignatureAsString\":\"setTranContAddr(address)\"},{\"name\":\"setsender\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"setsender()\"},{\"name\":\"unregisterParallelFunction\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"unregisterParallelFunction(string)\"},{\"name\":\"changeOwnership\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_ntfsId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_newOwner\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[],\"methodSignatureAsString\":\"changeOwnership(uint256,address)\"},{\"name\":\"offSale\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_ntfsId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"offSale(uint256)\"},{\"name\":\"sellNtf\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_ntfsId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint32\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint32\"},{\"name\":\"_time\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"_remark\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"sellNtf(uint256,uint32,string,string)\"},{\"name\":\"enableParallel\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"enableParallel()\"},{\"name\":\"getNtfById2\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_ntfsId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"picUrl\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"time\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"methodSignatureAsString\":\"getNtfById2(uint256)\"},{\"name\":\"ownerNtfCount\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"ownerNtfCount(address)\"},{\"name\":\"ntfOwner\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"_ntfsId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"methodSignatureAsString\":\"ntfOwner(address,uint256)\"},{\"name\":\"getNtfById1\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_ntfsId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"selling\",\"type\":\"bool\",\"indexed\":false,\"components\":null,\"typeAsString\":\"bool\"},{\"name\":\"species\",\"type\":\"uint16\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"methodSignatureAsString\":\"getNtfById1(uint256)\"},{\"name\":\"disableParallel\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"disableParallel()\"},{\"name\":\"buyNtf\",\"type\":\"function\",\"constant\":false,\"payable\":true,\"anonymous\":false,\"stateMutability\":\"payable\",\"inputs\":[{\"name\":\"_ntfsId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_time\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"}],\"outputs\":[],\"methodSignatureAsString\":\"buyNtf(uint256,string)\"},{\"name\":null,\"type\":\"constructor\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":null,\"methodSignatureAsString\":\"null()\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SELLINGNTFCOUNT = "sellingNtfCount";

    public static final String FUNC_NEWNTF = "newNtf";

    public static final String FUNC_GETNTFSFORSALE = "getNtfsForSale";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETMYNTFS = "getMyNtfs";

    public static final String FUNC_NTFCOUNT = "ntfCount";

    public static final String FUNC_SETTRANCONTADDR = "setTranContAddr";

    public static final String FUNC_SETSENDER = "setsender";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_CHANGEOWNERSHIP = "changeOwnership";

    public static final String FUNC_OFFSALE = "offSale";

    public static final String FUNC_SELLNTF = "sellNtf";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_GETNTFBYID2 = "getNtfById2";

    public static final String FUNC_OWNERNTFCOUNT = "ownerNtfCount";

    public static final String FUNC_NTFOWNER = "ntfOwner";

    public static final String FUNC_GETNTFBYID1 = "getNtfById1";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_BUYNTF = "buyNtf";

    protected NTFMarket(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger sellingNtfCount() throws ContractException {
        final Function function = new Function(FUNC_SELLINGNTFCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt newNtf(String _name, BigInteger _species, String _disc, String _picUrl) {
        final Function function = new Function(
                FUNC_NEWNTF,
                Arrays.<Type>asList(new Utf8String(_name),
                new Uint16(_species),
                new Utf8String(_disc),
                new Utf8String(_picUrl)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void newNtf(String _name, BigInteger _species, String _disc, String _picUrl, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWNTF,
                Arrays.<Type>asList(new Utf8String(_name),
                new Uint16(_species),
                new Utf8String(_disc),
                new Utf8String(_picUrl)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewNtf(String _name, BigInteger _species, String _disc, String _picUrl) {
        final Function function = new Function(
                FUNC_NEWNTF,
                Arrays.<Type>asList(new Utf8String(_name),
                new Uint16(_species),
                new Utf8String(_disc),
                new Utf8String(_picUrl)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, String> getNewNtfInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWNTF,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, String>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue()
                );
    }

    public List getNtfsForSale() throws ContractException {
        final Function function = new Function(FUNC_GETNTFSFORSALE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt registerParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void registerParallelFunction(String functionName, BigInteger criticalSize, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterParallelFunction(String functionName, BigInteger criticalSize) {
        final Function function = new Function(
                FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName),
                new Uint256(criticalSize)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public String getAddress() throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getMyNtfs() throws ContractException {
        final Function function = new Function(FUNC_GETMYNTFS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger ntfCount() throws ContractException {
        final Function function = new Function(FUNC_NTFCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setTranContAddr(String _transactionContract) {
        final Function function = new Function(
                FUNC_SETTRANCONTADDR,
                Arrays.<Type>asList(new Address(_transactionContract)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setTranContAddr(String _transactionContract, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTRANCONTADDR,
                Arrays.<Type>asList(new Address(_transactionContract)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTranContAddr(String _transactionContract) {
        final Function function = new Function(
                FUNC_SETTRANCONTADDR,
                Arrays.<Type>asList(new Address(_transactionContract)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetTranContAddrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTRANCONTADDR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setsender() {
        final Function function = new Function(
                FUNC_SETSENDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setsender(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSENDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetsender() {
        final Function function = new Function(
                FUNC_SETSENDER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt unregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUnregisterParallelFunction(String functionName) {
        final Function function = new Function(
                FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(new Utf8String(functionName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUnregisterParallelFunctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNREGISTERPARALLELFUNCTION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeOwnership(BigInteger _ntfsId, String _newOwner) {
        final Function function = new Function(
                FUNC_CHANGEOWNERSHIP,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Address(_newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void changeOwnership(BigInteger _ntfsId, String _newOwner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEOWNERSHIP,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Address(_newOwner)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeOwnership(BigInteger _ntfsId, String _newOwner) {
        final Function function = new Function(
                FUNC_CHANGEOWNERSHIP,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Address(_newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getChangeOwnershipInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEOWNERSHIP,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt offSale(BigInteger _ntfsId) {
        final Function function = new Function(
                FUNC_OFFSALE,
                Arrays.<Type>asList(new Uint256(_ntfsId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void offSale(BigInteger _ntfsId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OFFSALE,
                Arrays.<Type>asList(new Uint256(_ntfsId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOffSale(BigInteger _ntfsId) {
        final Function function = new Function(
                FUNC_OFFSALE,
                Arrays.<Type>asList(new Uint256(_ntfsId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getOffSaleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_OFFSALE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt sellNtf(BigInteger _ntfsId, BigInteger _price, String _time, String _remark) {
        final Function function = new Function(
                FUNC_SELLNTF,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Uint32(_price),
                new Utf8String(_time),
                new Utf8String(_remark)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void sellNtf(BigInteger _ntfsId, BigInteger _price, String _time, String _remark, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELLNTF,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Uint32(_price),
                new Utf8String(_time),
                new Utf8String(_remark)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSellNtf(BigInteger _ntfsId, BigInteger _price, String _time, String _remark) {
        final Function function = new Function(
                FUNC_SELLNTF,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Uint32(_price),
                new Utf8String(_time),
                new Utf8String(_remark)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, BigInteger, String, String> getSellNtfInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELLNTF,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt enableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void enableParallel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEnableParallel() {
        final Function function = new Function(
                FUNC_ENABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNtfById2(BigInteger _ntfsId) throws ContractException {
        final Function function = new Function(FUNC_GETNTFBYID2,
                Arrays.<Type>asList(new Uint256(_ntfsId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue());
    }

    public BigInteger ownerNtfCount(String _owner) throws ContractException {
        final Function function = new Function(FUNC_OWNERNTFCOUNT,
                Arrays.<Type>asList(new Address(_owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String ntfOwner(String _sender, BigInteger _ntfsId) throws ContractException {
        final Function function = new Function(FUNC_NTFOWNER,
                Arrays.<Type>asList(new Address(_sender),
                new Uint256(_ntfsId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple4<Boolean, BigInteger, BigInteger, String> getNtfById1(BigInteger _ntfsId) throws ContractException {
        final Function function = new Function(FUNC_GETNTFBYID1,
                Arrays.<Type>asList(new Uint256(_ntfsId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint16>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<Boolean, BigInteger, BigInteger, String>(
                (Boolean) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public TransactionReceipt disableParallel() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void disableParallel(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDisableParallel() {
        final Function function = new Function(
                FUNC_DISABLEPARALLEL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt buyNtf(BigInteger _ntfsId, String _time) {
        final Function function = new Function(
                FUNC_BUYNTF,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void buyNtf(BigInteger _ntfsId, String _time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYNTF,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyNtf(BigInteger _ntfsId, String _time) {
        final Function function = new Function(
                FUNC_BUYNTF,
                Arrays.<Type>asList(new Uint256(_ntfsId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getBuyNtfInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYNTF,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public static NTFMarket load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NTFMarket(contractAddress, client, credential);
    }

    public static NTFMarket deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(NTFMarket.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
