package com.fisco.app.contract;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class UserManager extends Contract {
    public static final String[] BINARY_ARRAY = {"","52602001807fe99d9ee6b395e8aebfe997ae000000000000000000000000000000000000000081525060200191505060405180910390fd5b600184815481101515610fe657fe5b906000526020600020906003020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110b45780601f10611089576101008083540402835291602001916110b4565b820191906000526020600020905b81548152906001019060200180831161109757829003601f168201915b505050505090509250925050915091565b806040516020018080602001828103825283818151815260200191508051906020019080838360005b838110156111095780820151818401526020810190506110ee565b50505050905090810190601f1680156111365780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040526040518082805190602001908083835b60208310151561117f578051825260208201915060208101905060208303925061115a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206003836040518082805190602001908083835b6020831015156111e457805182526020820191506020810190506020830392506111bf565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020181600019169055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061126757805160ff1916838001178555611295565b82800160010185558215611295579182015b82811115611294578251825591602001919060010190611279565b5b5090506112a2919061132d565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112df578054855561131c565b8280016001018555821561131c57600052602060002091601f016020900482015b8281111561131b578254825591600101919060010190611300565b5b509050611329919061132d565b5090565b61134f91905b8082111561134b576000816000905550600101611333565b5090565b905600a165627a7a723058202f0cf4d0edece29f5b6c1f94b0b717644404477de8e68182704a2129468634890029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","019150602081019050602083039250610f8e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff161515611068576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807fe69caae69fa5e588b0e8afa5e794a8e688b7e4bfa1e681af000000000000000081525060200191505060405180910390fd5b6003846040518082805190602001908083835b6020831015156110a0578051825260208201915060208101905060208303925061107b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111935780601f1061116857610100808354040283529160200191611193565b820191906000526020600020905b81548152906001019060200180831161117657829003601f168201915b505050505090509250925050915091565b60006002826040518082805190602001908083835b6020831015156111de57805182526020820191506020810190506020830392506111b9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061126757805160ff1916838001178555611295565b82800160010185558215611295579182015b82811115611294578251825591602001919060010190611279565b5b5090506112a2919061132d565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112df578054855561131c565b8280016001018555821561131c57600052602060002091601f016020900482015b8281111561131b578254825591600101919060010190611300565b5b509050611329919061132d565b5090565b61134f91905b8082111561134b576000816000905550600101611333565b5090565b905600a165627a7a72305820da145e2506d826d51cc0e5662c4d60ae14199573c6e0b2235e691a0734cfe3360029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUserNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"getUserInfoByUserName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"doLogin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddr\",\"type\":\"address\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"}],\"name\":\"checkRegister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAllUserInfos\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"newPwd\",\"type\":\"string\"}],\"name\":\"updatePassword\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETTOTALUSERNUM = "getTotalUserNum";

    public static final String FUNC_GETUSERINFOBYUSERNAME = "getUserInfoByUserName";

    public static final String FUNC_DOLOGIN = "doLogin";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_CHECKREGISTER = "checkRegister";

    public static final String FUNC_GETALLUSERINFOS = "getAllUserInfos";

    public static final String FUNC_UPDATEPASSWORD = "updatePassword";

    protected UserManager(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getTotalUserNum() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALUSERNUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<String, String> getUserInfoByUserName(String userName) throws ContractException {
        final Function function = new Function(FUNC_GETUSERINFOBYUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public Boolean doLogin(String userName, String password) throws ContractException {
        final Function function = new Function(FUNC_DOLOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt register(String ethAddr, String userName, String password) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(ethAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String ethAddr, String userName, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(ethAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String ethAddr, String userName, String password) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(ethAddr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Boolean checkRegister(String userName) throws ContractException {
        final Function function = new Function(FUNC_CHECKREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Tuple2<String, String> getAllUserInfos(BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETALLUSERINFOS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt updatePassword(String userName, String newPwd) {
        final Function function = new Function(
                FUNC_UPDATEPASSWORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newPwd)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updatePassword(String userName, String newPwd, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPASSWORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newPwd)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePassword(String userName, String newPwd) {
        final Function function = new Function(
                FUNC_UPDATEPASSWORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newPwd)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUpdatePasswordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPASSWORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public static UserManager load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new UserManager(contractAddress, client, credential);
    }

    public static UserManager deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(UserManager.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
