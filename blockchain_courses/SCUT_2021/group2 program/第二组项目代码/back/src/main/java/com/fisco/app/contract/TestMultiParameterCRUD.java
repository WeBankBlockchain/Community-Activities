package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestMultiParameterCRUD extends Contract {
    public static final String[] BINARY_ARRAY = {"","513d601f19601f82011682018060405250610ab89190810190611862565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b5691908101906117e7565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d160016000815481101515610b8457fe5b90600052602060002001876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bc8929190611c43565b600060405180830381600087803b158015610be257600080fd5b505af1158015610bf6573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb211786846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c51929190611b4c565b602060405180830381600087803b158015610c6b57600080fd5b505af1158015610c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ca3919081019061188b565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc315735811281604051610cd49190611b0f565b60405180910390a1809350505050919050565b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610da49190611b2a565b602060405180830381600087803b158015610dbe57600080fd5b505af1158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610df69190810190611862565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e5c57600080fd5b505af1158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e9491908101906117e7565b96508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398d896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610eed929190611b4c565b602060405180830381600087803b158015610f0757600080fd5b505af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f3f9190810190611810565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610fa557600080fd5b505af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fdd919081019061188b565b60405190808252806020026020018201604052801561101057816020015b6060815260200190600190039081610ffb5790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110af919081019061188b565b6040519080825280602002602001820160405280156110e257816020015b60608152602001906001900390816110cd5790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561114957600080fd5b505af115801561115d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611181919081019061188b565b6040519080825280602002602001820160405280156111b457816020015b606081526020019060019003908161119f5790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561122057600080fd5b505af1158015611234573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611258919081019061188b565b8212156115b2578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112b49190611b0f565b602060405180830381600087803b1580156112ce57600080fd5b505af11580156112e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113069190810190611839565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6001600081548110151561133457fe5b906000526020600020016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113769190611bea565b600060405180830381600087803b15801561139057600080fd5b505af11580156113a4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506113cd91908101906118f5565b85838151811015156113db57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb60018081548110151561141357fe5b906000526020600020016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114559190611bea565b600060405180830381600087803b15801561146f57600080fd5b505af1158015611483573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506114ac91908101906118f5565b84838151811015156114ba57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb600160028154811015156114f357fe5b906000526020600020016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115359190611bea565b600060405180830381600087803b15801561154f57600080fd5b505af1158015611563573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061158c91908101906118f5565b838381518110151561159a57fe5b906020019060200201819052508160010191506111bc565b8484849a509a509a5050505050505050509193909250565b600082601f83011215156115dd57600080fd5b81356115f06115eb82611ca7565b611c7a565b9150818183526020840193506020810190508360005b83811015611636578135860161161c88826116a4565b845260208401935060208301925050600181019050611606565b5050505092915050565b600061164c8251611d9e565b905092915050565b60006116608251611db0565b905092915050565b60006116748251611dc2565b905092915050565b60006116888251611dd4565b905092915050565b600061169c8251611de6565b905092915050565b600082601f83011215156116b757600080fd5b81356116ca6116c582611ccf565b611c7a565b915080825260208301602083018583830111156116e657600080fd5b6116f1838284611e14565b50505092915050565b600082601f830112151561170d57600080fd5b813561172061171b82611cfb565b611c7a565b9150808252602083016020830185838301111561173c57600080fd5b611747838284611e14565b50505092915050565b600082601f830112151561176357600080fd5b815161177661177182611cfb565b611c7a565b9150808252602083016020830185838301111561179257600080fd5b61179d838284611e23565b50505092915050565b6000602082840312156117b857600080fd5b600082013567ffffffffffffffff8111156117d257600080fd5b6117de848285016115ca565b91505092915050565b6000602082840312156117f957600080fd5b600061180784828501611640565b91505092915050565b60006020828403121561182257600080fd5b600061183084828501611654565b91505092915050565b60006020828403121561184b57600080fd5b600061185984828501611668565b91505092915050565b60006020828403121561187457600080fd5b60006118828482850161167c565b91505092915050565b60006020828403121561189d57600080fd5b60006118ab84828501611690565b91505092915050565b6000602082840312156118c657600080fd5b600082013567ffffffffffffffff8111156118e057600080fd5b6118ec848285016116fa565b91505092915050565b60006020828403121561190757600080fd5b600082015167ffffffffffffffff81111561192157600080fd5b61192d84828501611750565b91505092915050565b600061194182611d46565b8084526020840193508360208202850161195a85611d27565b60005b84811015611993578383038852611975838351611a07565b925061198082611d67565b915060208801975060018101905061195d565b508196508694505050505092915050565b6119ad81611df0565b82525050565b6119bc81611e02565b82525050565b6119cb81611d94565b82525050565b60006119dc82611d5c565b8084526119f0816020860160208601611e23565b6119f981611e56565b602085010191505092915050565b6000611a1282611d51565b808452611a26816020860160208601611e23565b611a2f81611e56565b602085010191505092915050565b600081546001811660008114611a5a5760018114611a7a57611abb565b607f600283041680865260ff198316602087015260408601935050611abb565b60028204808652602086019550611a9085611d34565b60005b82811015611ab2","57815481890152600182019150602081019050611a93565b80880195505050505b505092915050565b60006060820190508181036000830152611add8186611936565b90508181036020830152611af18185611936565b90508181036040830152611b058184611936565b9050949350505050565b6000602082019050611b2460008301846119c2565b92915050565b60006020820190508181036000830152611b448184611a07565b905092915050565b60006040820190508181036000830152611b6681856119d1565b9050611b7560208301846119a4565b9392505050565b60006040820190508181036000830152611b968185611a07565b9050611ba560208301846119b3565b9392505050565b60006060820190508181036000830152611bc68186611a07565b9050611bd560208301856119b3565b611be260408301846119a4565b949350505050565b60006020820190508181036000830152611c048184611a3d565b905092915050565b60006040820190508181036000830152611c268185611a3d565b90508181036020830152611c3a8184611a07565b90509392505050565b60006040820190508181036000830152611c5d8185611a3d565b90508181036020830152611c7181846119d1565b90509392505050565b6000604051905081810181811067ffffffffffffffff82111715611c9d57600080fd5b8060405250919050565b600067ffffffffffffffff821115611cbe57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611ce657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611d1257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611da982611d74565b9050919050565b6000611dbb82611d74565b9050919050565b6000611dcd82611d74565b9050919050565b6000611ddf82611d74565b9050919050565b6000819050919050565b6000611dfb82611d74565b9050919050565b6000611e0d82611d74565b9050919050565b82818337600083830152505050565b60005b83811015611e41578082015181840152602081019050611e26565b83811115611e50576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058202eb8f4fe0b37ed3c886641b02c6ff39a95ccae19cdb86f7b61ad6f276af391776c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040526060604051908101604052806040805190810160405280600481526020017f6e616d650000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600381526020017f616765000000000000000000000000000000000000000000000000000000000081525081526020016040805190810160405280600381526020017f74656c00000000000000000000000000000000000000000000000000000000008152508152506001906003620000d19291906200022c565b50348015620000df57600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001cf9190620004ab565b602060405180830381600087803b158015620001ea57600080fd5b505af1158015620001ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002259190810190620003d5565b5062000555565b82805482825590600052602060002090810192821562000280579160200282015b828111156200027f5782518290805190602001906200026e92919062000293565b50916020019190600101906200024d565b5b5090506200028f91906200031a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d657805160ff191683800117855562000307565b8280016001018555821562000307579182015b8281111562000306578251825591602001919060010190620002e9565b5b5090506200031691906200034b565b5090565b6200034891905b808211156200034457600081816200033a919062000373565b5060010162000321565b5090565b90565b6200037091905b808211156200036c57600081600090555060010162000352565b5090565b90565b50805460018160011615610100020316600290046000825580601f106200039b5750620003bc565b601f016020900490600052602060002090810190620003bb91906200034b565b5b50565b6000620003cd825162000504565b905092915050565b600060208284031215620003e857600080fd5b6000620003f884828501620003bf565b91505092915050565b60006200040e82620004f9565b808452620004248160208601602086016200050e565b6200042f8162000544565b602085010191505092915050565b6000600782527f6167652c74656c000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152620004c7818462000401565b90508181036020830152620004dc8162000474565b90508181036040830152620004f1816200043d565b905092915050565b600081519050919050565b6000819050919050565b60005b838110156200052e57808201518184015260208101905062000511565b838111156200053e576000848401525b50505050565b6000601f19601f8301169050919050565b611ea180620005656000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635b325d781461006757806386b733f9146100a6578063f7f3074f146100e3578063f96bd58014610120575b600080fd5b34801561007357600080fd5b5061008e600480360361008991908101906118b4565b61015d565b60405161009d93929190611ac3565b60405180910390f35b3480156100b257600080fd5b506100cd60048036036100c891908101906118b4565b610a40565b6040516100da9190611b0f565b60405180910390f35b3480156100ef57600080fd5b5061010a600480360361010591908101906117a6565b610d72565b6040516101179190611b0f565b60405180910390f35b34801561012c57600080fd5b50610147600480360361014291908101906117a6565b61124a565b6040516101549190611b0f565b60405180910390f35b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161021a9190611b2a565b602060405180830381600087803b15801561023457600080fd5b505af1158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061026c9190810190611862565b97508773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061030a91908101906117e7565b96508773ffffffffffffffffffffffffffffffffffffffff1663d8ac59578d896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610363929190611b4c565b602060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103b59190810190611810565b95508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561041b57600080fd5b505af115801561042f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610453919081019061188b565b60405190808252806020026020018201604052801561048657816020015b60608152602001906001900390816104715790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104ed57600080fd5b505af1158015610501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610525919081019061188b565b60405190808252806020026020018201604052801561055857816020015b60608152602001906001900390816105435790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156105bf57600080fd5b505af11580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105f7919081019061188b565b60405190808252806020026020018201604052801561062a57816020015b60608152602001906001900390816106155790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561069657600080fd5b505af11580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106ce919081019061188b565b821215610a28578573ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161072a9190611b0f565b602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061077c9190810190611839565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e8600160008154811015156107aa57fe5b906000526020600020016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107ec9190611bea565b600060405180830381600087803b15801561080657600080fd5b505af115801561081a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061084391908101906118f5565b858381518110151561085157fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e860018081548110151561088957fe5b906000526020600020016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108cb9190611bea565b600060405180830381600087803b1580156108e557600080fd5b505af11580156108f9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061092291908101906118f5565b848381518110151561093057fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86001600281548110151561096957fe5b906000526020600020016040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109ab9190611bea565b600060405180830381600087803b1580156109c557600080fd5b505af11580156109d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610a0291908101906118f5565b8383815181101515610a1057fe5b90602001906020020181905250816001019150610632565b8484849a509a509a5050505050505050509193909250565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f70657273","6f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610af19190611b2a565b602060405180830381600087803b158015610b0b57600080fd5b505af1158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b439190810190611862565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ba957600080fd5b505af1158015610bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610be191908101906117e7565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db560016000815481101515610c0f57fe5b90600052602060002001876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c53929190611c43565b600060405180830381600087803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166309ff42f086846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cdc929190611b4c565b602060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2e919081019061188b565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a727181604051610d5f9190611b0f565b60405180910390a1809350505050919050565b6000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e269190611b2a565b602060405180830381600087803b158015610e4057600080fd5b505af1158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e789190810190611862565b94508473ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ede57600080fd5b505af1158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f169190810190611839565b9350600192505b8651831015610fe9578373ffffffffffffffffffffffffffffffffffffffff16631a391cb4600185815481101515610f5157fe5b906000526020600020018986815181101515610f6957fe5b906020019060200201516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fac929190611c0c565b600060405180830381600087803b158015610fc657600080fd5b505af1158015610fda573d6000803e3d6000fd5b50505050826001019250610f1d565b8473ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061108591908101906117e7565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5600160008154811015156110b357fe5b906000526020600020018960008151811015156110cc57fe5b906020019060200201516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161110f929190611c0c565b600060405180830381600087803b15801561112957600080fd5b505af115801561113d573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663664b37d688600081518110151561116c57fe5b9060200190602002015186856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111b293929190611bac565b602060405180830381600087803b1580156111cc57600080fd5b505af11580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611204919081019061188b565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a816040516112359190611b0f565b60405180910390a18095505050505050919050565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112fd9190611b2a565b602060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061134f9190810190611862565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113b557600080fd5b505af11580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113ed9190810190611839565b9250600091505b6001805490508210156114c4578273ffffffffffffffffffffffffffffffffffffffff16631a391cb460018481548110151561142c57fe5b90600052602060002001888581518110151561144457fe5b906020019060200201516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611487929190611c0c565b600060405180830381600087803b1580156114a157600080fd5b505af11580156114b5573d6000803e3d6000fd5b505050508160010191506113f4565b8373ffffffffffffffffffffffffffffffffffffffff16634c6f30c08760008151811015156114ef57fe5b90602001906020020151856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611533929190611b7c565b602060405180830381600087803b15801561154d57600080fd5b505af1158015611561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611585919081019061188b565b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f9816040516115b69190611b0f565b60405180910390a180945050505050919050565b600082601f83011215156115dd57600080fd5b81356115f06115eb82611ca7565b611c7a565b9150818183526020840193506020810190508360005b83811015611636578135860161161c88826116a4565b845260208401935060208301925050600181019050611606565b5050505092915050565b600061164c8251611d9e565b905092915050565b60006116608251611db0565b905092915050565b60006116748251611dc2565b905092915050565b60006116888251611dd4565b905092915050565b600061169c8251611de6565b905092915050565b600082601f83011215156116b757600080fd5b81356116ca6116c582611ccf565b611c7a565b915080825260208301602083018583830111156116e657600080fd5b6116f1838284611e14565b50505092915050565b600082601f830112151561170d57600080fd5b813561172061171b82611cfb565b611c7a565b9150808252602083016020830185838301111561173c57600080fd5b611747838284611e14565b50505092915050565b600082601f830112151561176357600080fd5b815161177661177182611cfb565b611c7a565b9150808252602083016020830185838301111561179257600080fd5b61179d838284611e23565b50505092915050565b6000602082840312156117b857600080fd5b600082013567ffffffffffffffff8111156117d257600080fd5b6117de848285016115ca565b91505092915050565b6000602082840312156117f957600080fd5b600061180784828501611640565b91505092915050565b60006020828403121561182257600080fd5b600061183084828501611654565b91505092915050565b60006020828403121561184b57600080fd5b600061185984828501611668565b91505092915050565b60006020828403121561187457600080fd5b60006118828482850161167c565b91505092915050565b60006020828403121561189d57600080fd5b60006118ab84828501611690565b91505092915050565b6000602082840312156118c657600080fd5b600082013567ffffffffffffffff8111156118e057600080fd5b6118ec848285016116fa565b91505092915050565b60006020828403121561190757600080fd5b600082015167ffffffffffffffff81111561192157600080fd5b61192d84828501611750565b91505092915050565b600061194182611d46565b8084526020840193508360208202850161195a85611d27565b60005b84811015611993578383038852611975838351611a07565b925061198082611d67565b915060208801975060018101905061195d565b508196508694505050505092915050565b6119ad81611df0565b82525050565b6119bc81611e02565b82525050565b6119cb81611d94565b82525050565b60006119dc82611d5c565b8084526119f0816020860160208601611e23565b6119f981611e56565b602085010191505092915050565b6000611a1282611d51565b808452611a26816020860160208601611e23565b611a2f81611e56565b602085010191505092915050565b600081546001811660008114611a5a5760018114611a7a57611abb565b607f600283041680865260ff198316602087015260408601935050611abb565b60028204808652602086019550611a9085611d34565b60005b82811015611ab2","57815481890152600182019150602081019050611a93565b80880195505050505b505092915050565b60006060820190508181036000830152611add8186611936565b90508181036020830152611af18185611936565b90508181036040830152611b058184611936565b9050949350505050565b6000602082019050611b2460008301846119c2565b92915050565b60006020820190508181036000830152611b448184611a07565b905092915050565b60006040820190508181036000830152611b6681856119d1565b9050611b7560208301846119a4565b9392505050565b60006040820190508181036000830152611b968185611a07565b9050611ba560208301846119b3565b9392505050565b60006060820190508181036000830152611bc68186611a07565b9050611bd560208301856119b3565b611be260408301846119a4565b949350505050565b60006020820190508181036000830152611c048184611a3d565b905092915050565b60006040820190508181036000830152611c268185611a3d565b90508181036020830152611c3a8184611a07565b90509392505050565b60006040820190508181036000830152611c5d8185611a3d565b90508181036020830152611c7181846119d1565b90509392505050565b6000604051905081810181811067ffffffffffffffff82111715611c9d57600080fd5b8060405250919050565b600067ffffffffffffffff821115611cbe57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611ce657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611d1257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611da982611d74565b9050919050565b6000611dbb82611d74565b9050919050565b6000611dcd82611d74565b9050919050565b6000611ddf82611d74565b9050919050565b6000819050919050565b6000611dfb82611d74565b9050919050565b6000611e0d82611d74565b9050919050565b82818337600083830152505050565b60005b83811015611e41578082015181840152602081019050611e26565b83811115611e50576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201b36ae95f8d6a2dca58a2d89a281ea78bb3a433a942e6866c3f8b3ad496dd80e6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TestMultiParameterCRUD(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt update(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(entity.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(entity.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(entity.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt insert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(entity.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(entity.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(entity.isEmpty()? DynamicArray.empty("string[]"):new DynamicArray<Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> select(String name) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TestMultiParameterCRUD load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TestMultiParameterCRUD(contractAddress, client, credential);
    }

    public static TestMultiParameterCRUD deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(TestMultiParameterCRUD.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
